/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var percentileThreshold = 0;
var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? -10800000 : 0;
        var yOffset = options.yaxis.mode === "time" ? -10800000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
function prepareSeries(data){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        series.color = index;
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 578.0, "minX": 0.0, "maxY": 20597.0, "series": [{"data": [[0.0, 578.0], [0.1, 578.0], [0.2, 672.0], [0.3, 726.0], [0.4, 798.0], [0.5, 801.0], [0.6, 801.0], [0.7, 805.0], [0.8, 827.0], [0.9, 842.0], [1.0, 842.0], [1.1, 842.0], [1.2, 866.0], [1.3, 923.0], [1.4, 926.0], [1.5, 927.0], [1.6, 927.0], [1.7, 929.0], [1.8, 934.0], [1.9, 940.0], [2.0, 950.0], [2.1, 950.0], [2.2, 953.0], [2.3, 958.0], [2.4, 958.0], [2.5, 961.0], [2.6, 961.0], [2.7, 962.0], [2.8, 963.0], [2.9, 965.0], [3.0, 972.0], [3.1, 972.0], [3.2, 972.0], [3.3, 973.0], [3.4, 977.0], [3.5, 984.0], [3.6, 986.0], [3.7, 986.0], [3.8, 988.0], [3.9, 999.0], [4.0, 1002.0], [4.1, 1022.0], [4.2, 1022.0], [4.3, 1027.0], [4.4, 1032.0], [4.5, 1038.0], [4.6, 1047.0], [4.7, 1047.0], [4.8, 1054.0], [4.9, 1060.0], [5.0, 1074.0], [5.1, 1077.0], [5.2, 1077.0], [5.3, 1082.0], [5.4, 1087.0], [5.5, 1097.0], [5.6, 1103.0], [5.7, 1103.0], [5.8, 1115.0], [5.9, 1115.0], [6.0, 1115.0], [6.1, 1192.0], [6.2, 1192.0], [6.3, 1212.0], [6.4, 1304.0], [6.5, 1634.0], [6.6, 1735.0], [6.7, 1744.0], [6.8, 1744.0], [6.9, 1816.0], [7.0, 1822.0], [7.1, 1828.0], [7.2, 1905.0], [7.3, 1905.0], [7.4, 1939.0], [7.5, 1945.0], [7.6, 1953.0], [7.7, 1995.0], [7.8, 1995.0], [7.9, 1996.0], [8.0, 2022.0], [8.1, 2048.0], [8.2, 2072.0], [8.3, 2072.0], [8.4, 2085.0], [8.5, 2092.0], [8.6, 2158.0], [8.7, 2160.0], [8.8, 2160.0], [8.9, 2161.0], [9.0, 2185.0], [9.1, 2196.0], [9.2, 2227.0], [9.3, 2227.0], [9.4, 2232.0], [9.5, 2330.0], [9.6, 2366.0], [9.7, 2374.0], [9.8, 2374.0], [9.9, 2421.0], [10.0, 2433.0], [10.1, 2439.0], [10.2, 2442.0], [10.3, 2444.0], [10.4, 2444.0], [10.5, 2490.0], [10.6, 2492.0], [10.7, 2516.0], [10.8, 2526.0], [10.9, 2526.0], [11.0, 2536.0], [11.1, 2554.0], [11.2, 2579.0], [11.3, 2583.0], [11.4, 2583.0], [11.5, 2587.0], [11.6, 2603.0], [11.7, 2623.0], [11.8, 2625.0], [11.9, 2625.0], [12.0, 2636.0], [12.1, 2639.0], [12.2, 2656.0], [12.3, 2679.0], [12.4, 2679.0], [12.5, 2688.0], [12.6, 2784.0], [12.7, 2809.0], [12.8, 2866.0], [12.9, 2866.0], [13.0, 2892.0], [13.1, 2968.0], [13.2, 2988.0], [13.3, 2994.0], [13.4, 3023.0], [13.5, 3023.0], [13.6, 3078.0], [13.7, 3099.0], [13.8, 3181.0], [13.9, 3190.0], [14.0, 3190.0], [14.1, 3205.0], [14.2, 3222.0], [14.3, 3247.0], [14.4, 3254.0], [14.5, 3254.0], [14.6, 3256.0], [14.7, 3284.0], [14.8, 3286.0], [14.9, 3291.0], [15.0, 3291.0], [15.1, 3312.0], [15.2, 3329.0], [15.3, 3331.0], [15.4, 3339.0], [15.5, 3339.0], [15.6, 3362.0], [15.7, 3371.0], [15.8, 3381.0], [15.9, 3396.0], [16.0, 3396.0], [16.1, 3407.0], [16.2, 3417.0], [16.3, 3429.0], [16.4, 3462.0], [16.5, 3462.0], [16.6, 3484.0], [16.7, 3543.0], [16.8, 3561.0], [16.9, 3597.0], [17.0, 3607.0], [17.1, 3607.0], [17.2, 3642.0], [17.3, 3672.0], [17.4, 3674.0], [17.5, 3701.0], [17.6, 3701.0], [17.7, 3702.0], [17.8, 3778.0], [17.9, 3816.0], [18.0, 3826.0], [18.1, 3826.0], [18.2, 3843.0], [18.3, 3873.0], [18.4, 3946.0], [18.5, 3954.0], [18.6, 3954.0], [18.7, 3972.0], [18.8, 3977.0], [18.9, 4023.0], [19.0, 4068.0], [19.1, 4068.0], [19.2, 4298.0], [19.3, 4312.0], [19.4, 4315.0], [19.5, 4368.0], [19.6, 4368.0], [19.7, 4574.0], [19.8, 4636.0], [19.9, 4656.0], [20.0, 4765.0], [20.1, 4857.0], [20.2, 4857.0], [20.3, 4991.0], [20.4, 5061.0], [20.5, 5458.0], [20.6, 5467.0], [20.7, 5467.0], [20.8, 5531.0], [20.9, 5595.0], [21.0, 5674.0], [21.1, 5749.0], [21.2, 5749.0], [21.3, 5788.0], [21.4, 5805.0], [21.5, 5813.0], [21.6, 5886.0], [21.7, 5886.0], [21.8, 5899.0], [21.9, 5954.0], [22.0, 6078.0], [22.1, 6125.0], [22.2, 6125.0], [22.3, 6161.0], [22.4, 6195.0], [22.5, 6218.0], [22.6, 6240.0], [22.7, 6240.0], [22.8, 6247.0], [22.9, 6262.0], [23.0, 6284.0], [23.1, 6288.0], [23.2, 6288.0], [23.3, 6347.0], [23.4, 6361.0], [23.5, 6366.0], [23.6, 6414.0], [23.7, 6465.0], [23.8, 6465.0], [23.9, 6508.0], [24.0, 6611.0], [24.1, 6613.0], [24.2, 6623.0], [24.3, 6623.0], [24.4, 6650.0], [24.5, 6708.0], [24.6, 6752.0], [24.7, 6918.0], [24.8, 6918.0], [24.9, 6922.0], [25.0, 7009.0], [25.1, 7055.0], [25.2, 7094.0], [25.3, 7094.0], [25.4, 7097.0], [25.5, 7134.0], [25.6, 7136.0], [25.7, 7174.0], [25.8, 7174.0], [25.9, 7240.0], [26.0, 7249.0], [26.1, 7281.0], [26.2, 7283.0], [26.3, 7283.0], [26.4, 7286.0], [26.5, 7289.0], [26.6, 7325.0], [26.7, 7354.0], [26.8, 7363.0], [26.9, 7363.0], [27.0, 7436.0], [27.1, 7482.0], [27.2, 7510.0], [27.3, 7519.0], [27.4, 7519.0], [27.5, 7527.0], [27.6, 7540.0], [27.7, 7550.0], [27.8, 7558.0], [27.9, 7558.0], [28.0, 7593.0], [28.1, 7601.0], [28.2, 7612.0], [28.3, 7623.0], [28.4, 7623.0], [28.5, 7626.0], [28.6, 7654.0], [28.7, 7688.0], [28.8, 7758.0], [28.9, 7758.0], [29.0, 7762.0], [29.1, 7765.0], [29.2, 7771.0], [29.3, 7788.0], [29.4, 7788.0], [29.5, 7806.0], [29.6, 7841.0], [29.7, 7842.0], [29.8, 7880.0], [29.9, 7880.0], [30.0, 7987.0], [30.1, 7996.0], [30.2, 8005.0], [30.3, 8039.0], [30.4, 8177.0], [30.5, 8177.0], [30.6, 8200.0], [30.7, 8227.0], [30.8, 8269.0], [30.9, 8312.0], [31.0, 8312.0], [31.1, 8343.0], [31.2, 8369.0], [31.3, 8388.0], [31.4, 8423.0], [31.5, 8423.0], [31.6, 8460.0], [31.7, 8498.0], [31.8, 8520.0], [31.9, 8571.0], [32.0, 8571.0], [32.1, 8706.0], [32.2, 8759.0], [32.3, 8788.0], [32.4, 8829.0], [32.5, 8829.0], [32.6, 8909.0], [32.7, 8960.0], [32.8, 8977.0], [32.9, 8992.0], [33.0, 8992.0], [33.1, 9026.0], [33.2, 9091.0], [33.3, 9190.0], [33.4, 9200.0], [33.5, 9239.0], [33.6, 9239.0], [33.7, 9245.0], [33.8, 9253.0], [33.9, 9267.0], [34.0, 9270.0], [34.1, 9270.0], [34.2, 9285.0], [34.3, 9342.0], [34.4, 9347.0], [34.5, 9386.0], [34.6, 9386.0], [34.7, 9420.0], [34.8, 9537.0], [34.9, 9578.0], [35.0, 9585.0], [35.1, 9585.0], [35.2, 9588.0], [35.3, 9595.0], [35.4, 9640.0], [35.5, 9730.0], [35.6, 9730.0], [35.7, 9804.0], [35.8, 9820.0], [35.9, 9829.0], [36.0, 9844.0], [36.1, 9844.0], [36.2, 9852.0], [36.3, 9906.0], [36.4, 9947.0], [36.5, 10017.0], [36.6, 10017.0], [36.7, 10024.0], [36.8, 10049.0], [36.9, 10132.0], [37.0, 10294.0], [37.1, 10445.0], [37.2, 10445.0], [37.3, 10479.0], [37.4, 10482.0], [37.5, 10484.0], [37.6, 10527.0], [37.7, 10527.0], [37.8, 10775.0], [37.9, 10898.0], [38.0, 10908.0], [38.1, 10916.0], [38.2, 10916.0], [38.3, 10966.0], [38.4, 11032.0], [38.5, 11035.0], [38.6, 11053.0], [38.7, 11053.0], [38.8, 11104.0], [38.9, 11114.0], [39.0, 11121.0], [39.1, 11127.0], [39.2, 11127.0], [39.3, 11160.0], [39.4, 11238.0], [39.5, 11441.0], [39.6, 11530.0], [39.7, 11530.0], [39.8, 11644.0], [39.9, 11650.0], [40.0, 11746.0], [40.1, 11758.0], [40.2, 11847.0], [40.3, 11847.0], [40.4, 11923.0], [40.5, 11931.0], [40.6, 11989.0], [40.7, 11991.0], [40.8, 11991.0], [40.9, 12010.0], [41.0, 12021.0], [41.1, 12052.0], [41.2, 12079.0], [41.3, 12079.0], [41.4, 12080.0], [41.5, 12083.0], [41.6, 12094.0], [41.7, 12122.0], [41.8, 12122.0], [41.9, 12141.0], [42.0, 12162.0], [42.1, 12167.0], [42.2, 12173.0], [42.3, 12173.0], [42.4, 12184.0], [42.5, 12188.0], [42.6, 12205.0], [42.7, 12206.0], [42.8, 12206.0], [42.9, 12212.0], [43.0, 12228.0], [43.1, 12238.0], [43.2, 12254.0], [43.3, 12254.0], [43.4, 12273.0], [43.5, 12288.0], [43.6, 12308.0], [43.7, 12323.0], [43.8, 12335.0], [43.9, 12335.0], [44.0, 12355.0], [44.1, 12357.0], [44.2, 12401.0], [44.3, 12408.0], [44.4, 12408.0], [44.5, 12413.0], [44.6, 12416.0], [44.7, 12505.0], [44.8, 12529.0], [44.9, 12529.0], [45.0, 12547.0], [45.1, 12556.0], [45.2, 12593.0], [45.3, 12626.0], [45.4, 12626.0], [45.5, 12628.0], [45.6, 12638.0], [45.7, 12733.0], [45.8, 12856.0], [45.9, 12856.0], [46.0, 12929.0], [46.1, 13006.0], [46.2, 13046.0], [46.3, 13141.0], [46.4, 13141.0], [46.5, 13241.0], [46.6, 13300.0], [46.7, 13329.0], [46.8, 13347.0], [46.9, 13370.0], [47.0, 13370.0], [47.1, 13377.0], [47.2, 13388.0], [47.3, 13511.0], [47.4, 13512.0], [47.5, 13512.0], [47.6, 13525.0], [47.7, 13553.0], [47.8, 13583.0], [47.9, 13608.0], [48.0, 13608.0], [48.1, 13613.0], [48.2, 13624.0], [48.3, 13754.0], [48.4, 13783.0], [48.5, 13783.0], [48.6, 13817.0], [48.7, 13914.0], [48.8, 13992.0], [48.9, 14008.0], [49.0, 14008.0], [49.1, 14036.0], [49.2, 14077.0], [49.3, 14080.0], [49.4, 14163.0], [49.5, 14163.0], [49.6, 14211.0], [49.7, 14213.0], [49.8, 14249.0], [49.9, 14253.0], [50.0, 14253.0], [50.1, 14306.0], [50.2, 14330.0], [50.3, 14345.0], [50.4, 14350.0], [50.5, 14394.0], [50.6, 14394.0], [50.7, 14459.0], [50.8, 14512.0], [50.9, 14545.0], [51.0, 14562.0], [51.1, 14562.0], [51.2, 14571.0], [51.3, 14585.0], [51.4, 14587.0], [51.5, 14598.0], [51.6, 14598.0], [51.7, 14686.0], [51.8, 14704.0], [51.9, 14740.0], [52.0, 14799.0], [52.1, 14799.0], [52.2, 14814.0], [52.3, 14834.0], [52.4, 14854.0], [52.5, 14856.0], [52.6, 14856.0], [52.7, 14882.0], [52.8, 14891.0], [52.9, 14920.0], [53.0, 14934.0], [53.1, 14934.0], [53.2, 14947.0], [53.3, 14997.0], [53.4, 15009.0], [53.5, 15019.0], [53.6, 15031.0], [53.7, 15031.0], [53.8, 15041.0], [53.9, 15078.0], [54.0, 15097.0], [54.1, 15114.0], [54.2, 15114.0], [54.3, 15114.0], [54.4, 15148.0], [54.5, 15149.0], [54.6, 15155.0], [54.7, 15155.0], [54.8, 15159.0], [54.9, 15160.0], [55.0, 15171.0], [55.1, 15189.0], [55.2, 15189.0], [55.3, 15211.0], [55.4, 15216.0], [55.5, 15226.0], [55.6, 15283.0], [55.7, 15283.0], [55.8, 15289.0], [55.9, 15296.0], [56.0, 15300.0], [56.1, 15339.0], [56.2, 15339.0], [56.3, 15345.0], [56.4, 15350.0], [56.5, 15353.0], [56.6, 15353.0], [56.7, 15395.0], [56.8, 15395.0], [56.9, 15396.0], [57.0, 15396.0], [57.1, 15397.0], [57.2, 15419.0], [57.3, 15419.0], [57.4, 15442.0], [57.5, 15443.0], [57.6, 15443.0], [57.7, 15444.0], [57.8, 15444.0], [57.9, 15448.0], [58.0, 15450.0], [58.1, 15461.0], [58.2, 15463.0], [58.3, 15463.0], [58.4, 15467.0], [58.5, 15474.0], [58.6, 15485.0], [58.7, 15493.0], [58.8, 15493.0], [58.9, 15495.0], [59.0, 15521.0], [59.1, 15527.0], [59.2, 15533.0], [59.3, 15533.0], [59.4, 15549.0], [59.5, 15561.0], [59.6, 15566.0], [59.7, 15575.0], [59.8, 15575.0], [59.9, 15576.0], [60.0, 15578.0], [60.1, 15589.0], [60.2, 15593.0], [60.3, 15609.0], [60.4, 15609.0], [60.5, 15609.0], [60.6, 15611.0], [60.7, 15630.0], [60.8, 15644.0], [60.9, 15644.0], [61.0, 15670.0], [61.1, 15674.0], [61.2, 15674.0], [61.3, 15678.0], [61.4, 15678.0], [61.5, 15692.0], [61.6, 15705.0], [61.7, 15715.0], [61.8, 15728.0], [61.9, 15728.0], [62.0, 15729.0], [62.1, 15733.0], [62.2, 15739.0], [62.3, 15756.0], [62.4, 15756.0], [62.5, 15757.0], [62.6, 15762.0], [62.7, 15783.0], [62.8, 15794.0], [62.9, 15794.0], [63.0, 15796.0], [63.1, 15833.0], [63.2, 15841.0], [63.3, 15864.0], [63.4, 15882.0], [63.5, 15882.0], [63.6, 15890.0], [63.7, 15922.0], [63.8, 15930.0], [63.9, 15934.0], [64.0, 15934.0], [64.1, 15939.0], [64.2, 15961.0], [64.3, 15964.0], [64.4, 15964.0], [64.5, 15964.0], [64.6, 15977.0], [64.7, 15979.0], [64.8, 15991.0], [64.9, 15993.0], [65.0, 15993.0], [65.1, 16002.0], [65.2, 16019.0], [65.3, 16021.0], [65.4, 16021.0], [65.5, 16021.0], [65.6, 16021.0], [65.7, 16032.0], [65.8, 16035.0], [65.9, 16039.0], [66.0, 16039.0], [66.1, 16039.0], [66.2, 16041.0], [66.3, 16046.0], [66.4, 16058.0], [66.5, 16058.0], [66.6, 16068.0], [66.7, 16092.0], [66.8, 16098.0], [66.9, 16099.0], [67.0, 16111.0], [67.1, 16111.0], [67.2, 16113.0], [67.3, 16123.0], [67.4, 16128.0], [67.5, 16140.0], [67.6, 16140.0], [67.7, 16148.0], [67.8, 16150.0], [67.9, 16150.0], [68.0, 16160.0], [68.1, 16160.0], [68.2, 16161.0], [68.3, 16162.0], [68.4, 16170.0], [68.5, 16182.0], [68.6, 16182.0], [68.7, 16193.0], [68.8, 16194.0], [68.9, 16199.0], [69.0, 16199.0], [69.1, 16199.0], [69.2, 16202.0], [69.3, 16215.0], [69.4, 16216.0], [69.5, 16219.0], [69.6, 16219.0], [69.7, 16223.0], [69.8, 16236.0], [69.9, 16237.0], [70.0, 16237.0], [70.1, 16244.0], [70.2, 16244.0], [70.3, 16244.0], [70.4, 16249.0], [70.5, 16254.0], [70.6, 16257.0], [70.7, 16257.0], [70.8, 16258.0], [70.9, 16260.0], [71.0, 16262.0], [71.1, 16266.0], [71.2, 16266.0], [71.3, 16270.0], [71.4, 16275.0], [71.5, 16278.0], [71.6, 16282.0], [71.7, 16282.0], [71.8, 16284.0], [71.9, 16285.0], [72.0, 16291.0], [72.1, 16299.0], [72.2, 16299.0], [72.3, 16303.0], [72.4, 16314.0], [72.5, 16315.0], [72.6, 16316.0], [72.7, 16316.0], [72.8, 16336.0], [72.9, 16340.0], [73.0, 16350.0], [73.1, 16351.0], [73.2, 16351.0], [73.3, 16352.0], [73.4, 16353.0], [73.5, 16353.0], [73.6, 16355.0], [73.7, 16366.0], [73.8, 16366.0], [73.9, 16368.0], [74.0, 16372.0], [74.1, 16374.0], [74.2, 16375.0], [74.3, 16375.0], [74.4, 16378.0], [74.5, 16380.0], [74.6, 16388.0], [74.7, 16394.0], [74.8, 16394.0], [74.9, 16410.0], [75.0, 16413.0], [75.1, 16416.0], [75.2, 16432.0], [75.3, 16432.0], [75.4, 16436.0], [75.5, 16444.0], [75.6, 16450.0], [75.7, 16452.0], [75.8, 16452.0], [75.9, 16456.0], [76.0, 16459.0], [76.1, 16478.0], [76.2, 16487.0], [76.3, 16487.0], [76.4, 16488.0], [76.5, 16498.0], [76.6, 16506.0], [76.7, 16506.0], [76.8, 16513.0], [76.9, 16513.0], [77.0, 16528.0], [77.1, 16531.0], [77.2, 16532.0], [77.3, 16533.0], [77.4, 16533.0], [77.5, 16539.0], [77.6, 16539.0], [77.7, 16554.0], [77.8, 16564.0], [77.9, 16564.0], [78.0, 16567.0], [78.1, 16571.0], [78.2, 16580.0], [78.3, 16605.0], [78.4, 16605.0], [78.5, 16623.0], [78.6, 16631.0], [78.7, 16637.0], [78.8, 16648.0], [78.9, 16648.0], [79.0, 16650.0], [79.1, 16660.0], [79.2, 16661.0], [79.3, 16662.0], [79.4, 16662.0], [79.5, 16667.0], [79.6, 16671.0], [79.7, 16671.0], [79.8, 16672.0], [79.9, 16672.0], [80.0, 16673.0], [80.1, 16673.0], [80.2, 16677.0], [80.3, 16677.0], [80.4, 16680.0], [80.5, 16680.0], [80.6, 16686.0], [80.7, 16689.0], [80.8, 16689.0], [80.9, 16692.0], [81.0, 16692.0], [81.1, 16700.0], [81.2, 16704.0], [81.3, 16707.0], [81.4, 16716.0], [81.5, 16716.0], [81.6, 16716.0], [81.7, 16716.0], [81.8, 16723.0], [81.9, 16729.0], [82.0, 16729.0], [82.1, 16732.0], [82.2, 16737.0], [82.3, 16738.0], [82.4, 16740.0], [82.5, 16740.0], [82.6, 16744.0], [82.7, 16748.0], [82.8, 16749.0], [82.9, 16753.0], [83.0, 16753.0], [83.1, 16773.0], [83.2, 16775.0], [83.3, 16777.0], [83.4, 16784.0], [83.5, 16808.0], [83.6, 16808.0], [83.7, 16813.0], [83.8, 16816.0], [83.9, 16818.0], [84.0, 16821.0], [84.1, 16821.0], [84.2, 16830.0], [84.3, 16850.0], [84.4, 16853.0], [84.5, 16861.0], [84.6, 16861.0], [84.7, 16864.0], [84.8, 16876.0], [84.9, 16877.0], [85.0, 16884.0], [85.1, 16884.0], [85.2, 16888.0], [85.3, 16888.0], [85.4, 16912.0], [85.5, 16914.0], [85.6, 16914.0], [85.7, 16916.0], [85.8, 16925.0], [85.9, 16961.0], [86.0, 16982.0], [86.1, 16982.0], [86.2, 16986.0], [86.3, 16989.0], [86.4, 16991.0], [86.5, 16993.0], [86.6, 16993.0], [86.7, 17004.0], [86.8, 17008.0], [86.9, 17012.0], [87.0, 17017.0], [87.1, 17022.0], [87.2, 17022.0], [87.3, 17033.0], [87.4, 17036.0], [87.5, 17056.0], [87.6, 17060.0], [87.7, 17060.0], [87.8, 17068.0], [87.9, 17071.0], [88.0, 17081.0], [88.1, 17082.0], [88.2, 17082.0], [88.3, 17092.0], [88.4, 17092.0], [88.5, 17101.0], [88.6, 17102.0], [88.7, 17102.0], [88.8, 17143.0], [88.9, 17171.0], [89.0, 17172.0], [89.1, 17180.0], [89.2, 17180.0], [89.3, 17184.0], [89.4, 17193.0], [89.5, 17200.0], [89.6, 17212.0], [89.7, 17212.0], [89.8, 17216.0], [89.9, 17251.0], [90.0, 17270.0], [90.1, 17276.0], [90.2, 17276.0], [90.3, 17276.0], [90.4, 17284.0], [90.5, 17290.0], [90.6, 17298.0], [90.7, 17344.0], [90.8, 17344.0], [90.9, 17347.0], [91.0, 17372.0], [91.1, 17387.0], [91.2, 17418.0], [91.3, 17418.0], [91.4, 17432.0], [91.5, 17458.0], [91.6, 17500.0], [91.7, 17537.0], [91.8, 17537.0], [91.9, 17583.0], [92.0, 17645.0], [92.1, 17778.0], [92.2, 17829.0], [92.3, 17829.0], [92.4, 17837.0], [92.5, 17846.0], [92.6, 17853.0], [92.7, 17860.0], [92.8, 17860.0], [92.9, 17891.0], [93.0, 17930.0], [93.1, 17976.0], [93.2, 18002.0], [93.3, 18002.0], [93.4, 18005.0], [93.5, 18084.0], [93.6, 18088.0], [93.7, 18116.0], [93.8, 18128.0], [93.9, 18128.0], [94.0, 18199.0], [94.1, 18220.0], [94.2, 18243.0], [94.3, 18253.0], [94.4, 18253.0], [94.5, 18255.0], [94.6, 18283.0], [94.7, 18308.0], [94.8, 18395.0], [94.9, 18395.0], [95.0, 18457.0], [95.1, 18473.0], [95.2, 18494.0], [95.3, 18526.0], [95.4, 18526.0], [95.5, 18546.0], [95.6, 18564.0], [95.7, 18572.0], [95.8, 18655.0], [95.9, 18655.0], [96.0, 18665.0], [96.1, 18691.0], [96.2, 18719.0], [96.3, 18747.0], [96.4, 18747.0], [96.5, 18749.0], [96.6, 18797.0], [96.7, 18888.0], [96.8, 18918.0], [96.9, 19128.0], [97.0, 19128.0], [97.1, 19245.0], [97.2, 19315.0], [97.3, 19323.0], [97.4, 19373.0], [97.5, 19373.0], [97.6, 19386.0], [97.7, 19406.0], [97.8, 19424.0], [97.9, 19478.0], [98.0, 19478.0], [98.1, 19479.0], [98.2, 19513.0], [98.3, 19559.0], [98.4, 19597.0], [98.5, 19597.0], [98.6, 19611.0], [98.7, 19632.0], [98.8, 19656.0], [98.9, 19728.0], [99.0, 19728.0], [99.1, 19748.0], [99.2, 19836.0], [99.3, 19896.0], [99.4, 19937.0], [99.5, 19937.0], [99.6, 19975.0], [99.7, 20038.0], [99.8, 20207.0], [99.9, 20597.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[0.0, 817.0], [0.1, 817.0], [0.2, 817.0], [0.3, 836.0], [0.4, 861.0], [0.5, 864.0], [0.6, 872.0], [0.7, 879.0], [0.8, 879.0], [0.9, 888.0], [1.0, 910.0], [1.1, 933.0], [1.2, 946.0], [1.3, 951.0], [1.4, 957.0], [1.5, 959.0], [1.6, 959.0], [1.7, 965.0], [1.8, 966.0], [1.9, 970.0], [2.0, 972.0], [2.1, 973.0], [2.2, 973.0], [2.3, 983.0], [2.4, 983.0], [2.5, 989.0], [2.6, 990.0], [2.7, 991.0], [2.8, 995.0], [2.9, 1005.0], [3.0, 1012.0], [3.1, 1021.0], [3.2, 1021.0], [3.3, 1021.0], [3.4, 1022.0], [3.5, 1028.0], [3.6, 1034.0], [3.7, 1043.0], [3.8, 1046.0], [3.9, 1049.0], [4.0, 1049.0], [4.1, 1052.0], [4.2, 1059.0], [4.3, 1060.0], [4.4, 1073.0], [4.5, 1076.0], [4.6, 1091.0], [4.7, 1092.0], [4.8, 1092.0], [4.9, 1108.0], [5.0, 1108.0], [5.1, 1112.0], [5.2, 1114.0], [5.3, 1116.0], [5.4, 1126.0], [5.5, 1129.0], [5.6, 1129.0], [5.7, 1139.0], [5.8, 1148.0], [5.9, 1151.0], [6.0, 1208.0], [6.1, 1226.0], [6.2, 1237.0], [6.3, 1237.0], [6.4, 1241.0], [6.5, 1286.0], [6.6, 1337.0], [6.7, 1353.0], [6.8, 1406.0], [6.9, 1759.0], [7.0, 1975.0], [7.1, 1975.0], [7.2, 2004.0], [7.3, 2017.0], [7.4, 2033.0], [7.5, 2037.0], [7.6, 2106.0], [7.7, 2111.0], [7.8, 2112.0], [7.9, 2112.0], [8.0, 2123.0], [8.1, 2133.0], [8.2, 2171.0], [8.3, 2174.0], [8.4, 2191.0], [8.5, 2211.0], [8.6, 2244.0], [8.7, 2244.0], [8.8, 2254.0], [8.9, 2280.0], [9.0, 2297.0], [9.1, 2331.0], [9.2, 2339.0], [9.3, 2356.0], [9.4, 2368.0], [9.5, 2368.0], [9.6, 2381.0], [9.7, 2420.0], [9.8, 2421.0], [9.9, 2428.0], [10.0, 2438.0], [10.1, 2463.0], [10.2, 2471.0], [10.3, 2471.0], [10.4, 2472.0], [10.5, 2486.0], [10.6, 2488.0], [10.7, 2503.0], [10.8, 2520.0], [10.9, 2526.0], [11.0, 2543.0], [11.1, 2543.0], [11.2, 2573.0], [11.3, 2583.0], [11.4, 2595.0], [11.5, 2608.0], [11.6, 2646.0], [11.7, 2653.0], [11.8, 2673.0], [11.9, 2673.0], [12.0, 2687.0], [12.1, 2707.0], [12.2, 2715.0], [12.3, 2719.0], [12.4, 2722.0], [12.5, 2756.0], [12.6, 2756.0], [12.7, 2761.0], [12.8, 2777.0], [12.9, 2782.0], [13.0, 2812.0], [13.1, 2833.0], [13.2, 2873.0], [13.3, 2901.0], [13.4, 2901.0], [13.5, 2906.0], [13.6, 2917.0], [13.7, 2922.0], [13.8, 2959.0], [13.9, 2981.0], [14.0, 3056.0], [14.1, 3093.0], [14.2, 3093.0], [14.3, 3097.0], [14.4, 3103.0], [14.5, 3107.0], [14.6, 3137.0], [14.7, 3190.0], [14.8, 3264.0], [14.9, 3279.0], [15.0, 3279.0], [15.1, 3331.0], [15.2, 3364.0], [15.3, 3365.0], [15.4, 3393.0], [15.5, 3429.0], [15.6, 3430.0], [15.7, 3432.0], [15.8, 3432.0], [15.9, 3437.0], [16.0, 3484.0], [16.1, 3525.0], [16.2, 3555.0], [16.3, 3582.0], [16.4, 3600.0], [16.5, 3605.0], [16.6, 3605.0], [16.7, 3620.0], [16.8, 3642.0], [16.9, 3645.0], [17.0, 3655.0], [17.1, 3696.0], [17.2, 3710.0], [17.3, 3710.0], [17.4, 3710.0], [17.5, 3715.0], [17.6, 3720.0], [17.7, 3735.0], [17.8, 3748.0], [17.9, 3764.0], [18.0, 3776.0], [18.1, 3789.0], [18.2, 3789.0], [18.3, 3817.0], [18.4, 3826.0], [18.5, 3827.0], [18.6, 3843.0], [18.7, 3848.0], [18.8, 3926.0], [18.9, 3926.0], [19.0, 3989.0], [19.1, 4009.0], [19.2, 4010.0], [19.3, 4045.0], [19.4, 4062.0], [19.5, 4079.0], [19.6, 4142.0], [19.7, 4142.0], [19.8, 4427.0], [19.9, 4486.0], [20.0, 4550.0], [20.1, 4639.0], [20.2, 4673.0], [20.3, 4748.0], [20.4, 4863.0], [20.5, 4863.0], [20.6, 4976.0], [20.7, 5040.0], [20.8, 5134.0], [20.9, 5225.0], [21.0, 5241.0], [21.1, 5274.0], [21.2, 5331.0], [21.3, 5331.0], [21.4, 5348.0], [21.5, 5357.0], [21.6, 5386.0], [21.7, 5466.0], [21.8, 5541.0], [21.9, 5568.0], [22.0, 5576.0], [22.1, 5576.0], [22.2, 5595.0], [22.3, 5605.0], [22.4, 5607.0], [22.5, 5665.0], [22.6, 5688.0], [22.7, 5692.0], [22.8, 5709.0], [22.9, 5709.0], [23.0, 5798.0], [23.1, 5827.0], [23.2, 5845.0], [23.3, 5901.0], [23.4, 5908.0], [23.5, 6083.0], [23.6, 6101.0], [23.7, 6101.0], [23.8, 6133.0], [23.9, 6139.0], [24.0, 6153.0], [24.1, 6181.0], [24.2, 6233.0], [24.3, 6288.0], [24.4, 6316.0], [24.5, 6316.0], [24.6, 6396.0], [24.7, 6441.0], [24.8, 6457.0], [24.9, 6459.0], [25.0, 6480.0], [25.1, 6499.0], [25.2, 6499.0], [25.3, 6514.0], [25.4, 6561.0], [25.5, 6592.0], [25.6, 6596.0], [25.7, 6665.0], [25.8, 6699.0], [25.9, 6748.0], [26.0, 6748.0], [26.1, 6800.0], [26.2, 6809.0], [26.3, 6838.0], [26.4, 6848.0], [26.5, 6918.0], [26.6, 6983.0], [26.7, 7079.0], [26.8, 7079.0], [26.9, 7097.0], [27.0, 7099.0], [27.1, 7166.0], [27.2, 7197.0], [27.3, 7276.0], [27.4, 7288.0], [27.5, 7300.0], [27.6, 7300.0], [27.7, 7405.0], [27.8, 7409.0], [27.9, 7505.0], [28.0, 7593.0], [28.1, 7600.0], [28.2, 7710.0], [28.3, 7727.0], [28.4, 7727.0], [28.5, 7738.0], [28.6, 7751.0], [28.7, 7797.0], [28.8, 7809.0], [28.9, 7825.0], [29.0, 7858.0], [29.1, 7921.0], [29.2, 7921.0], [29.3, 7949.0], [29.4, 7975.0], [29.5, 8008.0], [29.6, 8021.0], [29.7, 8033.0], [29.8, 8062.0], [29.9, 8100.0], [30.0, 8100.0], [30.1, 8128.0], [30.2, 8184.0], [30.3, 8185.0], [30.4, 8349.0], [30.5, 8352.0], [30.6, 8425.0], [30.7, 8595.0], [30.8, 8595.0], [30.9, 8602.0], [31.0, 8604.0], [31.1, 8711.0], [31.2, 8717.0], [31.3, 8867.0], [31.4, 8930.0], [31.5, 8930.0], [31.6, 9013.0], [31.7, 9174.0], [31.8, 9182.0], [31.9, 9198.0], [32.0, 9261.0], [32.1, 9263.0], [32.2, 9276.0], [32.3, 9276.0], [32.4, 9281.0], [32.5, 9323.0], [32.6, 9341.0], [32.7, 9362.0], [32.8, 9420.0], [32.9, 9432.0], [33.0, 9433.0], [33.1, 9433.0], [33.2, 9433.0], [33.3, 9450.0], [33.4, 9460.0], [33.5, 9468.0], [33.6, 9495.0], [33.7, 9508.0], [33.8, 9554.0], [33.9, 9554.0], [34.0, 9563.0], [34.1, 9609.0], [34.2, 9655.0], [34.3, 9695.0], [34.4, 9716.0], [34.5, 9720.0], [34.6, 9761.0], [34.7, 9761.0], [34.8, 9766.0], [34.9, 9770.0], [35.0, 9777.0], [35.1, 9786.0], [35.2, 9805.0], [35.3, 9834.0], [35.4, 9901.0], [35.5, 9901.0], [35.6, 9911.0], [35.7, 9991.0], [35.8, 10015.0], [35.9, 10027.0], [36.0, 10056.0], [36.1, 10078.0], [36.2, 10087.0], [36.3, 10087.0], [36.4, 10101.0], [36.5, 10134.0], [36.6, 10159.0], [36.7, 10185.0], [36.8, 10210.0], [36.9, 10223.0], [37.0, 10308.0], [37.1, 10308.0], [37.2, 10340.0], [37.3, 10351.0], [37.4, 10351.0], [37.5, 10382.0], [37.6, 10385.0], [37.7, 10399.0], [37.8, 10399.0], [37.9, 10399.0], [38.0, 10440.0], [38.1, 10448.0], [38.2, 10513.0], [38.3, 10513.0], [38.4, 10521.0], [38.5, 10528.0], [38.6, 10528.0], [38.7, 10550.0], [38.8, 10725.0], [38.9, 10766.0], [39.0, 10766.0], [39.1, 10777.0], [39.2, 10810.0], [39.3, 10867.0], [39.4, 10867.0], [39.5, 10927.0], [39.6, 11002.0], [39.7, 11038.0], [39.8, 11047.0], [39.9, 11048.0], [40.0, 11055.0], [40.1, 11161.0], [40.2, 11161.0], [40.3, 11224.0], [40.4, 11229.0], [40.5, 11238.0], [40.6, 11255.0], [40.7, 11259.0], [40.8, 11286.0], [40.9, 11309.0], [41.0, 11309.0], [41.1, 11320.0], [41.2, 11328.0], [41.3, 11337.0], [41.4, 11347.0], [41.5, 11423.0], [41.6, 11443.0], [41.7, 11451.0], [41.8, 11451.0], [41.9, 11468.0], [42.0, 11491.0], [42.1, 11541.0], [42.2, 11599.0], [42.3, 11611.0], [42.4, 11620.0], [42.5, 11657.0], [42.6, 11657.0], [42.7, 11660.0], [42.8, 11702.0], [42.9, 11859.0], [43.0, 11899.0], [43.1, 11935.0], [43.2, 12021.0], [43.3, 12037.0], [43.4, 12037.0], [43.5, 12079.0], [43.6, 12120.0], [43.7, 12141.0], [43.8, 12154.0], [43.9, 12223.0], [44.0, 12238.0], [44.1, 12238.0], [44.2, 12265.0], [44.3, 12266.0], [44.4, 12273.0], [44.5, 12282.0], [44.6, 12427.0], [44.7, 12449.0], [44.8, 12479.0], [44.9, 12479.0], [45.0, 12496.0], [45.1, 12533.0], [45.2, 12540.0], [45.3, 12574.0], [45.4, 12678.0], [45.5, 12690.0], [45.6, 12720.0], [45.7, 12720.0], [45.8, 12767.0], [45.9, 12935.0], [46.0, 12995.0], [46.1, 13006.0], [46.2, 13034.0], [46.3, 13073.0], [46.4, 13111.0], [46.5, 13111.0], [46.6, 13115.0], [46.7, 13117.0], [46.8, 13149.0], [46.9, 13173.0], [47.0, 13175.0], [47.1, 13183.0], [47.2, 13213.0], [47.3, 13213.0], [47.4, 13254.0], [47.5, 13298.0], [47.6, 13381.0], [47.7, 13387.0], [47.8, 13457.0], [47.9, 13457.0], [48.0, 13463.0], [48.1, 13463.0], [48.2, 13484.0], [48.3, 13521.0], [48.4, 13545.0], [48.5, 13584.0], [48.6, 13587.0], [48.7, 13631.0], [48.8, 13647.0], [48.9, 13647.0], [49.0, 13657.0], [49.1, 13673.0], [49.2, 13676.0], [49.3, 13689.0], [49.4, 13781.0], [49.5, 13862.0], [49.6, 13875.0], [49.7, 13875.0], [49.8, 13879.0], [49.9, 13881.0], [50.0, 13995.0], [50.1, 14013.0], [50.2, 14018.0], [50.3, 14021.0], [50.4, 14021.0], [50.5, 14032.0], [50.6, 14040.0], [50.7, 14045.0], [50.8, 14055.0], [50.9, 14060.0], [51.0, 14162.0], [51.1, 14172.0], [51.2, 14172.0], [51.3, 14211.0], [51.4, 14286.0], [51.5, 14380.0], [51.6, 14403.0], [51.7, 14418.0], [51.8, 14423.0], [51.9, 14425.0], [52.0, 14425.0], [52.1, 14431.0], [52.2, 14459.0], [52.3, 14482.0], [52.4, 14482.0], [52.5, 14492.0], [52.6, 14511.0], [52.7, 14537.0], [52.8, 14537.0], [52.9, 14641.0], [53.0, 14668.0], [53.1, 14683.0], [53.2, 14717.0], [53.3, 14740.0], [53.4, 14749.0], [53.5, 14753.0], [53.6, 14753.0], [53.7, 14776.0], [53.8, 14776.0], [53.9, 14839.0], [54.0, 14840.0], [54.1, 14843.0], [54.2, 14861.0], [54.3, 14876.0], [54.4, 14876.0], [54.5, 14895.0], [54.6, 14904.0], [54.7, 14909.0], [54.8, 14912.0], [54.9, 14940.0], [55.0, 14953.0], [55.1, 14967.0], [55.2, 14967.0], [55.3, 14969.0], [55.4, 14977.0], [55.5, 14989.0], [55.6, 14990.0], [55.7, 15036.0], [55.8, 15041.0], [55.9, 15070.0], [56.0, 15070.0], [56.1, 15084.0], [56.2, 15087.0], [56.3, 15116.0], [56.4, 15116.0], [56.5, 15116.0], [56.6, 15117.0], [56.7, 15117.0], [56.8, 15119.0], [56.9, 15126.0], [57.0, 15169.0], [57.1, 15174.0], [57.2, 15179.0], [57.3, 15197.0], [57.4, 15201.0], [57.5, 15201.0], [57.6, 15204.0], [57.7, 15222.0], [57.8, 15226.0], [57.9, 15229.0], [58.0, 15256.0], [58.1, 15264.0], [58.2, 15280.0], [58.3, 15280.0], [58.4, 15290.0], [58.5, 15339.0], [58.6, 15340.0], [58.7, 15355.0], [58.8, 15361.0], [58.9, 15361.0], [59.0, 15363.0], [59.1, 15363.0], [59.2, 15363.0], [59.3, 15379.0], [59.4, 15385.0], [59.5, 15407.0], [59.6, 15426.0], [59.7, 15426.0], [59.8, 15427.0], [59.9, 15427.0], [60.0, 15435.0], [60.1, 15439.0], [60.2, 15440.0], [60.3, 15441.0], [60.4, 15441.0], [60.5, 15481.0], [60.6, 15496.0], [60.7, 15496.0], [60.8, 15497.0], [60.9, 15504.0], [61.0, 15508.0], [61.1, 15513.0], [61.2, 15517.0], [61.3, 15521.0], [61.4, 15527.0], [61.5, 15527.0], [61.6, 15532.0], [61.7, 15539.0], [61.8, 15557.0], [61.9, 15559.0], [62.0, 15577.0], [62.1, 15584.0], [62.2, 15598.0], [62.3, 15598.0], [62.4, 15627.0], [62.5, 15628.0], [62.6, 15629.0], [62.7, 15645.0], [62.8, 15653.0], [62.9, 15657.0], [63.0, 15657.0], [63.1, 15661.0], [63.2, 15662.0], [63.3, 15668.0], [63.4, 15677.0], [63.5, 15680.0], [63.6, 15682.0], [63.7, 15697.0], [63.8, 15697.0], [63.9, 15701.0], [64.0, 15710.0], [64.1, 15711.0], [64.2, 15712.0], [64.3, 15717.0], [64.4, 15722.0], [64.5, 15722.0], [64.6, 15722.0], [64.7, 15741.0], [64.8, 15741.0], [64.9, 15759.0], [65.0, 15762.0], [65.1, 15771.0], [65.2, 15796.0], [65.3, 15799.0], [65.4, 15799.0], [65.5, 15801.0], [65.6, 15816.0], [65.7, 15818.0], [65.8, 15827.0], [65.9, 15833.0], [66.0, 15835.0], [66.1, 15841.0], [66.2, 15841.0], [66.3, 15855.0], [66.4, 15863.0], [66.5, 15868.0], [66.6, 15871.0], [66.7, 15875.0], [66.8, 15883.0], [66.9, 15891.0], [67.0, 15891.0], [67.1, 15894.0], [67.2, 15907.0], [67.3, 15913.0], [67.4, 15923.0], [67.5, 15927.0], [67.6, 15928.0], [67.7, 15931.0], [67.8, 15931.0], [67.9, 15931.0], [68.0, 15931.0], [68.1, 15935.0], [68.2, 15948.0], [68.3, 15950.0], [68.4, 15967.0], [68.5, 15976.0], [68.6, 15976.0], [68.7, 15976.0], [68.8, 15977.0], [68.9, 15978.0], [69.0, 15984.0], [69.1, 15984.0], [69.2, 15994.0], [69.3, 15994.0], [69.4, 15999.0], [69.5, 16000.0], [69.6, 16005.0], [69.7, 16010.0], [69.8, 16014.0], [69.9, 16016.0], [70.0, 16018.0], [70.1, 16018.0], [70.2, 16021.0], [70.3, 16022.0], [70.4, 16023.0], [70.5, 16027.0], [70.6, 16036.0], [70.7, 16037.0], [70.8, 16051.0], [70.9, 16051.0], [71.0, 16056.0], [71.1, 16069.0], [71.2, 16069.0], [71.3, 16071.0], [71.4, 16074.0], [71.5, 16079.0], [71.6, 16081.0], [71.7, 16081.0], [71.8, 16082.0], [71.9, 16087.0], [72.0, 16091.0], [72.1, 16093.0], [72.2, 16097.0], [72.3, 16110.0], [72.4, 16113.0], [72.5, 16113.0], [72.6, 16123.0], [72.7, 16126.0], [72.8, 16140.0], [72.9, 16152.0], [73.0, 16152.0], [73.1, 16154.0], [73.2, 16155.0], [73.3, 16155.0], [73.4, 16157.0], [73.5, 16163.0], [73.6, 16182.0], [73.7, 16198.0], [73.8, 16204.0], [73.9, 16205.0], [74.0, 16207.0], [74.1, 16207.0], [74.2, 16209.0], [74.3, 16209.0], [74.4, 16218.0], [74.5, 16220.0], [74.6, 16223.0], [74.7, 16224.0], [74.8, 16229.0], [74.9, 16229.0], [75.0, 16231.0], [75.1, 16236.0], [75.2, 16241.0], [75.3, 16242.0], [75.4, 16251.0], [75.5, 16251.0], [75.6, 16251.0], [75.7, 16252.0], [75.8, 16263.0], [75.9, 16276.0], [76.0, 16282.0], [76.1, 16291.0], [76.2, 16304.0], [76.3, 16305.0], [76.4, 16305.0], [76.5, 16309.0], [76.6, 16315.0], [76.7, 16318.0], [76.8, 16325.0], [76.9, 16353.0], [77.0, 16365.0], [77.1, 16368.0], [77.2, 16368.0], [77.3, 16371.0], [77.4, 16376.0], [77.5, 16376.0], [77.6, 16377.0], [77.7, 16383.0], [77.8, 16387.0], [77.9, 16391.0], [78.0, 16391.0], [78.1, 16398.0], [78.2, 16403.0], [78.3, 16406.0], [78.4, 16408.0], [78.5, 16411.0], [78.6, 16422.0], [78.7, 16425.0], [78.8, 16425.0], [78.9, 16429.0], [79.0, 16430.0], [79.1, 16436.0], [79.2, 16439.0], [79.3, 16442.0], [79.4, 16447.0], [79.5, 16449.0], [79.6, 16449.0], [79.7, 16453.0], [79.8, 16456.0], [79.9, 16466.0], [80.0, 16466.0], [80.1, 16470.0], [80.2, 16473.0], [80.3, 16482.0], [80.4, 16482.0], [80.5, 16482.0], [80.6, 16483.0], [80.7, 16485.0], [80.8, 16488.0], [80.9, 16491.0], [81.0, 16493.0], [81.1, 16499.0], [81.2, 16499.0], [81.3, 16502.0], [81.4, 16502.0], [81.5, 16510.0], [81.6, 16511.0], [81.7, 16512.0], [81.8, 16520.0], [81.9, 16520.0], [82.0, 16525.0], [82.1, 16529.0], [82.2, 16538.0], [82.3, 16541.0], [82.4, 16541.0], [82.5, 16548.0], [82.6, 16553.0], [82.7, 16553.0], [82.8, 16559.0], [82.9, 16562.0], [83.0, 16564.0], [83.1, 16569.0], [83.2, 16571.0], [83.3, 16578.0], [83.4, 16579.0], [83.5, 16579.0], [83.6, 16580.0], [83.7, 16582.0], [83.8, 16587.0], [83.9, 16589.0], [84.0, 16589.0], [84.1, 16591.0], [84.2, 16592.0], [84.3, 16592.0], [84.4, 16595.0], [84.5, 16607.0], [84.6, 16617.0], [84.7, 16621.0], [84.8, 16621.0], [84.9, 16623.0], [85.0, 16625.0], [85.1, 16625.0], [85.2, 16628.0], [85.3, 16630.0], [85.4, 16631.0], [85.5, 16648.0], [85.6, 16649.0], [85.7, 16673.0], [85.8, 16679.0], [85.9, 16679.0], [86.0, 16682.0], [86.1, 16683.0], [86.2, 16696.0], [86.3, 16701.0], [86.4, 16705.0], [86.5, 16719.0], [86.6, 16723.0], [86.7, 16723.0], [86.8, 16725.0], [86.9, 16741.0], [87.0, 16752.0], [87.1, 16753.0], [87.2, 16755.0], [87.3, 16760.0], [87.4, 16773.0], [87.5, 16773.0], [87.6, 16775.0], [87.7, 16776.0], [87.8, 16779.0], [87.9, 16784.0], [88.0, 16784.0], [88.1, 16787.0], [88.2, 16787.0], [88.3, 16787.0], [88.4, 16798.0], [88.5, 16801.0], [88.6, 16803.0], [88.7, 16805.0], [88.8, 16810.0], [88.9, 16817.0], [89.0, 16817.0], [89.1, 16821.0], [89.2, 16829.0], [89.3, 16829.0], [89.4, 16831.0], [89.5, 16846.0], [89.6, 16846.0], [89.7, 16848.0], [89.8, 16848.0], [89.9, 16855.0], [90.0, 16857.0], [90.1, 16866.0], [90.2, 16877.0], [90.3, 16878.0], [90.4, 16880.0], [90.5, 16881.0], [90.6, 16881.0], [90.7, 16888.0], [90.8, 16892.0], [90.9, 16903.0], [91.0, 16909.0], [91.1, 16913.0], [91.2, 16916.0], [91.3, 16925.0], [91.4, 16925.0], [91.5, 16941.0], [91.6, 16957.0], [91.7, 16965.0], [91.8, 16966.0], [91.9, 16982.0], [92.0, 16983.0], [92.1, 16996.0], [92.2, 16996.0], [92.3, 17009.0], [92.4, 17010.0], [92.5, 17015.0], [92.6, 17029.0], [92.7, 17031.0], [92.8, 17041.0], [92.9, 17050.0], [93.0, 17050.0], [93.1, 17053.0], [93.2, 17053.0], [93.3, 17055.0], [93.4, 17057.0], [93.5, 17063.0], [93.6, 17072.0], [93.7, 17096.0], [93.8, 17096.0], [93.9, 17099.0], [94.0, 17119.0], [94.1, 17124.0], [94.2, 17127.0], [94.3, 17164.0], [94.4, 17258.0], [94.5, 17258.0], [94.6, 17277.0], [94.7, 17279.0], [94.8, 17323.0], [94.9, 17332.0], [95.0, 17333.0], [95.1, 17351.0], [95.2, 17399.0], [95.3, 17399.0], [95.4, 17402.0], [95.5, 17579.0], [95.6, 17636.0], [95.7, 17660.0], [95.8, 17783.0], [95.9, 17824.0], [96.0, 17838.0], [96.1, 17838.0], [96.2, 17881.0], [96.3, 17900.0], [96.4, 17906.0], [96.5, 17913.0], [96.6, 17977.0], [96.7, 18000.0], [96.8, 18001.0], [96.9, 18001.0], [97.0, 18018.0], [97.1, 18029.0], [97.2, 18078.0], [97.3, 18082.0], [97.4, 18131.0], [97.5, 18182.0], [97.6, 18195.0], [97.7, 18195.0], [97.8, 18226.0], [97.9, 18241.0], [98.0, 18286.0], [98.1, 18305.0], [98.2, 18312.0], [98.3, 18339.0], [98.4, 18346.0], [98.5, 18346.0], [98.6, 18364.0], [98.7, 18374.0], [98.8, 18414.0], [98.9, 18459.0], [99.0, 18501.0], [99.1, 18513.0], [99.2, 18651.0], [99.3, 18651.0], [99.4, 18758.0], [99.5, 18868.0], [99.6, 19012.0], [99.7, 20019.0], [99.8, 20266.0], [99.9, 20497.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"), function(series){
                series.curvedLines = {apply: true, tension: 1};
                series.threshold = {
                        below: percentileThreshold,
                        color: $("#slider-vertical").children("div").css("background-color")
                };
            });
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 103.0, "series": [{"data": [[8500.0, 10.0], [9000.0, 14.0], [9500.0, 14.0], [10000.0, 9.0], [10500.0, 6.0], [11000.0, 10.0], [11500.0, 10.0], [12000.0, 31.0], [12500.0, 11.0], [13000.0, 10.0], [13500.0, 13.0], [14000.0, 15.0], [14500.0, 21.0], [15000.0, 45.0], [15500.0, 49.0], [1000.0, 20.0], [16000.0, 93.0], [16500.0, 81.0], [17000.0, 40.0], [17500.0, 13.0], [18000.0, 17.0], [18500.0, 13.0], [19000.0, 10.0], [19500.0, 12.0], [20000.0, 2.0], [20500.0, 1.0], [1500.0, 12.0], [2000.0, 22.0], [2500.0, 22.0], [3000.0, 26.0], [3500.0, 18.0], [4000.0, 6.0], [4500.0, 6.0], [5000.0, 3.0], [5500.0, 10.0], [6000.0, 15.0], [6500.0, 9.0], [7000.0, 18.0], [7500.0, 24.0], [500.0, 32.0], [8000.0, 13.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[8500.0, 7.0], [9000.0, 19.0], [9500.0, 18.0], [10000.0, 21.0], [10500.0, 12.0], [11000.0, 22.0], [11500.0, 10.0], [12000.0, 16.0], [12500.0, 9.0], [13000.0, 19.0], [13500.0, 16.0], [14000.0, 22.0], [14500.0, 27.0], [15000.0, 45.0], [15500.0, 75.0], [1000.0, 35.0], [16000.0, 103.0], [17000.0, 28.0], [16500.0, 96.0], [17500.0, 11.0], [18000.0, 20.0], [18500.0, 5.0], [19000.0, 1.0], [20000.0, 3.0], [1500.0, 2.0], [2000.0, 31.0], [2500.0, 29.0], [3000.0, 18.0], [3500.0, 26.0], [4000.0, 8.0], [4500.0, 6.0], [5000.0, 10.0], [5500.0, 15.0], [6000.0, 15.0], [6500.0, 13.0], [7000.0, 10.0], [7500.0, 14.0], [500.0, 25.0], [8000.0, 11.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 20500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.53018036E12, "maxY": 100.0, "series": [{"data": [[1.53018042E12, 32.592997811816204], [1.5301806E12, 98.6764705882353], [1.53018066E12, 34.5], [1.53018048E12, 82.83651226158042], [1.53018054E12, 100.0], [1.53018036E12, 10.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.53018066E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 972.7254901960785, "minX": 1.0, "maxY": 17976.0, "series": [{"data": [[32.0, 10102.0], [33.0, 16660.0], [2.0, 15728.0], [35.0, 16564.0], [37.0, 16749.0], [40.0, 5073.71794871795], [50.0, 7016.5], [60.0, 7667.861111111111], [62.0, 16784.0], [66.0, 16700.0], [65.0, 16488.0], [70.0, 9447.225], [68.0, 16648.0], [74.0, 17143.0], [73.0, 16864.0], [79.0, 17500.0], [77.0, 16637.0], [80.0, 10542.964285714283], [82.0, 17284.0], [81.0, 17432.0], [5.0, 15991.0], [86.0, 17276.0], [85.0, 17976.0], [88.0, 12162.0], [90.0, 12430.865384615383], [91.0, 17270.0], [95.0, 17102.0], [93.0, 17071.0], [98.0, 16278.0], [97.0, 17387.0], [100.0, 16365.223057644123], [9.0, 15841.0], [10.0, 972.7254901960785], [13.0, 15977.0], [19.0, 16275.0], [20.0, 2242.1875000000005], [24.0, 16605.0], [25.0, 16748.0], [26.0, 16355.0], [27.0, 17017.0], [28.0, 16161.0], [30.0, 3367.9555555555553], [31.0, 16039.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[74.0669975186104, 11689.091811414391]], "isOverall": false, "label": "completarEncuestaPreInscripcion-Aggregated", "isController": false}, {"data": [[3.0, 15984.0], [4.0, 15759.0], [6.0, 15871.0], [7.0, 16242.0], [8.0, 16091.0], [10.0, 1292.4333333333332], [11.0, 15653.0], [12.0, 15948.0], [14.0, 8669.0], [15.0, 15339.0], [16.0, 16152.0], [17.0, 15999.0], [18.0, 15827.0], [20.0, 2683.3061224489793], [21.0, 9189.0], [22.0, 16051.0], [23.0, 15796.0], [26.0, 2583.0], [29.0, 17041.0], [30.0, 3631.3269230769247], [34.0, 16723.0], [36.0, 16595.0], [39.0, 16398.0], [38.0, 16473.0], [40.0, 5348.536585365853], [41.0, 16548.0], [43.0, 16564.0], [42.0, 16784.0], [45.0, 17015.0], [44.0, 16801.0], [47.0, 16353.0], [46.0, 16511.0], [49.0, 15407.0], [48.0, 15682.0], [50.0, 6911.35294117647], [51.0, 17050.0], [53.0, 17332.0], [52.0, 16579.0], [55.0, 15863.0], [54.0, 14162.0], [57.0, 17055.0], [56.0, 14021.0], [59.0, 16798.0], [58.0, 17009.0], [60.0, 8918.409090909092], [61.0, 16752.0], [63.0, 16877.0], [67.0, 16773.0], [64.0, 16631.0], [70.0, 10270.892857142859], [71.0, 14162.5], [69.0, 16276.0], [75.0, 17258.0], [72.0, 17124.0], [78.0, 16829.0], [76.0, 17127.0], [80.0, 10858.886792452835], [83.0, 17636.0], [87.0, 17660.0], [84.0, 17824.0], [89.0, 14586.5], [90.0, 12531.241379310346], [88.0, 17333.0], [94.0, 16925.0], [92.0, 17072.0], [99.0, 17279.0], [96.0, 17402.0], [100.0, 15957.491315136484], [1.0, 15627.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}, {"data": [[71.11454753722802, 11460.58991981671]], "isOverall": false, "label": "obtenerEncuesta-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.53018036E12, "maxY": 172089.46666666667, "series": [{"data": [[1.53018042E12, 0.0], [1.5301806E12, 0.0], [1.53018066E12, 0.0], [1.53018048E12, 0.0], [1.53018054E12, 0.0], [1.53018036E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.53018042E12, 172089.46666666667], [1.5301806E12, 131654.45], [1.53018066E12, 35979.26666666667], [1.53018048E12, 153317.65], [1.53018054E12, 133056.98333333334], [1.53018036E12, 18434.466666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.53018066E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 990.1000000000001, "minX": 1.53018036E12, "maxY": 17151.606382978727, "series": [{"data": [[1.53018042E12, 4134.0625], [1.5301806E12, 16030.770408163266], [1.53018066E12, 16420.578947368424], [1.53018048E12, 11302.213836477984], [1.53018054E12, 17151.606382978727], [1.53018036E12, 990.1000000000001]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[1.53018042E12, 3942.480686695279], [1.5301806E12, 16063.573033707868], [1.53018066E12, 16249.571428571431], [1.53018048E12, 11599.942307692305], [1.53018054E12, 16615.983333333326], [1.53018036E12, 1091.4800000000002]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.53018066E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 990.1000000000001, "minX": 1.53018036E12, "maxY": 17151.595744680846, "series": [{"data": [[1.53018042E12, 4134.058035714286], [1.5301806E12, 16030.770408163266], [1.53018066E12, 16420.578947368424], [1.53018048E12, 11302.20754716981], [1.53018054E12, 17151.595744680846], [1.53018036E12, 990.1000000000001]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[1.53018042E12, 3935.914163090129], [1.5301806E12, 16056.730337078649], [1.53018066E12, 16244.204081632657], [1.53018048E12, 11593.475961538452], [1.53018054E12, 16609.62222222222], [1.53018036E12, 1086.4000000000003]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.53018066E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1027.0, "minX": 45.0, "maxY": 16629.0, "series": [{"data": [[68.0, 16402.0], [45.0, 1027.0], [367.0, 11491.0], [368.0, 16629.0], [374.0, 16124.5], [457.0, 3484.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 457.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            }
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1027.0, "minX": 45.0, "maxY": 16626.0, "series": [{"data": [[68.0, 16385.0], [45.0, 1027.0], [367.0, 11468.0], [368.0, 16626.0], [374.0, 16113.5], [457.0, 3484.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 457.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            }
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.53018036E12, "maxY": 8.45, "series": [{"data": [[1.53018042E12, 8.45], [1.5301806E12, 5.7], [1.53018048E12, 6.783333333333333], [1.53018054E12, 6.133333333333334], [1.53018036E12, 0.9166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5301806E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.75, "minX": 1.53018036E12, "maxY": 7.616666666666666, "series": [{"data": [[1.53018042E12, 7.616666666666666], [1.5301806E12, 6.233333333333333], [1.53018066E12, 1.1333333333333333], [1.53018048E12, 6.116666666666666], [1.53018054E12, 6.133333333333334], [1.53018036E12, 0.75]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.53018066E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.53018036E12, "maxY": 3.8833333333333333, "series": [{"data": [[1.53018042E12, 3.8833333333333333], [1.5301806E12, 2.966666666666667], [1.53018066E12, 0.8166666666666667], [1.53018048E12, 3.466666666666667], [1.53018054E12, 3.0], [1.53018036E12, 0.4166666666666667]], "isOverall": false, "label": "obtenerEncuesta-success", "isController": false}, {"data": [[1.53018042E12, 3.7333333333333334], [1.5301806E12, 3.2666666666666666], [1.53018066E12, 0.31666666666666665], [1.53018048E12, 2.65], [1.53018054E12, 3.1333333333333333], [1.53018036E12, 0.3333333333333333]], "isOverall": false, "label": "completarEncuestaPreInscripcion-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.53018066E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#responseTimesOverTime";
        } else if (elem.id == "bodyLantenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

// create slider
$(function() {
    $( "#slider-vertical" ).slider({
      orientation: "vertical",
      range: "min",
      min: responseTimePercentilesInfos.data.result.minY,
      max: responseTimePercentilesInfos.data.result.maxY,
      value: 0,
      stop: function(event, ui ) {
       percentileThreshold= ui.value;
       refreshResponseTimePercentiles();
       $("#amount").val(percentileThreshold);
      }
    });
    $("#amount" ).val( $( "#slider-vertical" ).slider( "value" ) );
    $("#slider-vertical").children("div").css("background-color","purple");
    $("#amount" ).css("color", $("#slider-vertical").children("div").css("background-color"));
    $("#slider-vertical").children("div").css("opacity","0.3");
});

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
