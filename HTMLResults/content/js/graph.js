/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var percentileThreshold = 0;
var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? -10800000 : 0;
        var yOffset = options.yaxis.mode === "time" ? -10800000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
function prepareSeries(data){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        series.color = index;
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2550.0, "minX": 0.0, "maxY": 94299.0, "series": [{"data": [[0.0, 2550.0], [0.1, 2550.0], [0.2, 2763.0], [0.3, 2803.0], [0.4, 3481.0], [0.5, 3557.0], [0.6, 3980.0], [0.7, 4029.0], [0.8, 4537.0], [0.9, 4703.0], [1.0, 4777.0], [1.1, 4781.0], [1.2, 5122.0], [1.3, 5375.0], [1.4, 5437.0], [1.5, 5459.0], [1.6, 5478.0], [1.7, 5510.0], [1.8, 5534.0], [1.9, 5548.0], [2.0, 5548.0], [2.1, 5579.0], [2.2, 5585.0], [2.3, 5677.0], [2.4, 5680.0], [2.5, 5684.0], [2.6, 5800.0], [2.7, 5817.0], [2.8, 5819.0], [2.9, 5915.0], [3.0, 5921.0], [3.1, 5945.0], [3.2, 5959.0], [3.3, 5969.0], [3.4, 5979.0], [3.5, 5982.0], [3.6, 5991.0], [3.7, 6004.0], [3.8, 6018.0], [3.9, 6018.0], [4.0, 6077.0], [4.1, 6088.0], [4.2, 6107.0], [4.3, 6163.0], [4.4, 6190.0], [4.5, 6193.0], [4.6, 6195.0], [4.7, 6204.0], [4.8, 6215.0], [4.9, 6245.0], [5.0, 6290.0], [5.1, 6324.0], [5.2, 6356.0], [5.3, 6373.0], [5.4, 6438.0], [5.5, 6453.0], [5.6, 8818.0], [5.7, 9462.0], [5.8, 9462.0], [5.9, 9727.0], [6.0, 9793.0], [6.1, 9824.0], [6.2, 9896.0], [6.3, 9908.0], [6.4, 9931.0], [6.5, 9946.0], [6.6, 9976.0], [6.7, 9978.0], [6.8, 9980.0], [6.9, 9992.0], [7.0, 9997.0], [7.1, 10006.0], [7.2, 10026.0], [7.3, 10060.0], [7.4, 10126.0], [7.5, 10166.0], [7.6, 10167.0], [7.7, 10167.0], [7.8, 10182.0], [7.9, 10186.0], [8.0, 10186.0], [8.1, 10195.0], [8.2, 10244.0], [8.3, 10304.0], [8.4, 10306.0], [8.5, 10327.0], [8.6, 10355.0], [8.7, 10363.0], [8.8, 10363.0], [8.9, 10374.0], [9.0, 10420.0], [9.1, 10496.0], [9.2, 10561.0], [9.3, 10604.0], [9.4, 10642.0], [9.5, 10685.0], [9.6, 10721.0], [9.7, 10721.0], [9.8, 10745.0], [9.9, 10760.0], [10.0, 10773.0], [10.1, 10774.0], [10.2, 10788.0], [10.3, 10790.0], [10.4, 10804.0], [10.5, 10823.0], [10.6, 10836.0], [10.7, 10896.0], [10.8, 10902.0], [10.9, 10915.0], [11.0, 10928.0], [11.1, 10947.0], [11.2, 10957.0], [11.3, 10967.0], [11.4, 10987.0], [11.5, 10992.0], [11.6, 10992.0], [11.7, 11017.0], [11.8, 11019.0], [11.9, 11021.0], [12.0, 11032.0], [12.1, 11088.0], [12.2, 11094.0], [12.3, 11099.0], [12.4, 11113.0], [12.5, 11142.0], [12.6, 11190.0], [12.7, 11192.0], [12.8, 11205.0], [12.9, 11215.0], [13.0, 11230.0], [13.1, 11273.0], [13.2, 11289.0], [13.3, 11291.0], [13.4, 11291.0], [13.5, 11291.0], [13.6, 11306.0], [13.7, 11330.0], [13.8, 11340.0], [13.9, 11349.0], [14.0, 11370.0], [14.1, 11376.0], [14.2, 11381.0], [14.3, 11390.0], [14.4, 11436.0], [14.5, 11505.0], [14.6, 11521.0], [14.7, 11540.0], [14.8, 11545.0], [14.9, 11564.0], [15.0, 11652.0], [15.1, 11687.0], [15.2, 11825.0], [15.3, 11938.0], [15.4, 11938.0], [15.5, 11944.0], [15.6, 12030.0], [15.7, 12137.0], [15.8, 12473.0], [15.9, 16365.0], [16.0, 16760.0], [16.1, 16792.0], [16.2, 17228.0], [16.3, 17354.0], [16.4, 17409.0], [16.5, 17417.0], [16.6, 17439.0], [16.7, 17501.0], [16.8, 17504.0], [16.9, 17531.0], [17.0, 17782.0], [17.1, 17790.0], [17.2, 17816.0], [17.3, 17858.0], [17.4, 17858.0], [17.5, 17898.0], [17.6, 18043.0], [17.7, 18142.0], [17.8, 18274.0], [17.9, 19046.0], [18.0, 19131.0], [18.1, 19783.0], [18.2, 23233.0], [18.3, 23664.0], [18.4, 24591.0], [18.5, 25560.0], [18.6, 25605.0], [18.7, 25633.0], [18.8, 25791.0], [18.9, 25803.0], [19.0, 25810.0], [19.1, 25830.0], [19.2, 25833.0], [19.3, 25833.0], [19.4, 25841.0], [19.5, 25841.0], [19.6, 25844.0], [19.7, 25877.0], [19.8, 25905.0], [19.9, 25942.0], [20.0, 25957.0], [20.1, 25974.0], [20.2, 25999.0], [20.3, 26004.0], [20.4, 26009.0], [20.5, 26073.0], [20.6, 26119.0], [20.7, 26155.0], [20.8, 26177.0], [20.9, 26186.0], [21.0, 26207.0], [21.1, 26209.0], [21.2, 26209.0], [21.3, 26212.0], [21.4, 26223.0], [21.5, 26243.0], [21.6, 26275.0], [21.7, 26275.0], [21.8, 26288.0], [21.9, 26302.0], [22.0, 26313.0], [22.1, 26315.0], [22.2, 26325.0], [22.3, 26361.0], [22.4, 26443.0], [22.5, 26455.0], [22.6, 26462.0], [22.7, 26469.0], [22.8, 26503.0], [22.9, 26510.0], [23.0, 26553.0], [23.1, 26553.0], [23.2, 26812.0], [23.3, 26822.0], [23.4, 27025.0], [23.5, 27140.0], [23.6, 27168.0], [23.7, 27202.0], [23.8, 27217.0], [23.9, 27237.0], [24.0, 27277.0], [24.1, 27280.0], [24.2, 27284.0], [24.3, 27302.0], [24.4, 27308.0], [24.5, 27429.0], [24.6, 27453.0], [24.7, 27461.0], [24.8, 27489.0], [24.9, 27502.0], [25.0, 27502.0], [25.1, 27513.0], [25.2, 27539.0], [25.3, 27555.0], [25.4, 27568.0], [25.5, 27575.0], [25.6, 27653.0], [25.7, 27666.0], [25.8, 27677.0], [25.9, 27746.0], [26.0, 27771.0], [26.1, 27774.0], [26.2, 27783.0], [26.3, 27804.0], [26.4, 27805.0], [26.5, 27897.0], [26.6, 27899.0], [26.7, 27925.0], [26.8, 27994.0], [26.9, 28019.0], [27.0, 28019.0], [27.1, 28115.0], [27.2, 28434.0], [27.3, 29343.0], [27.4, 29501.0], [27.5, 29542.0], [27.6, 29915.0], [27.7, 30258.0], [27.8, 30811.0], [27.9, 31100.0], [28.0, 31432.0], [28.1, 33476.0], [28.2, 33611.0], [28.3, 33696.0], [28.4, 33834.0], [28.5, 33859.0], [28.6, 33947.0], [28.7, 33968.0], [28.8, 33973.0], [28.9, 33973.0], [29.0, 34088.0], [29.1, 34143.0], [29.2, 34145.0], [29.3, 34155.0], [29.4, 34169.0], [29.5, 34173.0], [29.6, 34183.0], [29.7, 34189.0], [29.8, 34192.0], [29.9, 34214.0], [30.0, 34293.0], [30.1, 34323.0], [30.2, 34326.0], [30.3, 34339.0], [30.4, 34343.0], [30.5, 34355.0], [30.6, 34358.0], [30.7, 34377.0], [30.8, 34377.0], [30.9, 34386.0], [31.0, 34391.0], [31.1, 34432.0], [31.2, 34442.0], [31.3, 34486.0], [31.4, 34498.0], [31.5, 34502.0], [31.6, 34528.0], [31.7, 34535.0], [31.8, 34563.0], [31.9, 34570.0], [32.0, 34607.0], [32.1, 34658.0], [32.2, 34669.0], [32.3, 34679.0], [32.4, 34700.0], [32.5, 34771.0], [32.6, 34823.0], [32.7, 34823.0], [32.8, 34829.0], [32.9, 34833.0], [33.0, 34851.0], [33.1, 34859.0], [33.2, 34913.0], [33.3, 34960.0], [33.4, 34985.0], [33.5, 35018.0], [33.6, 35033.0], [33.7, 35050.0], [33.8, 35065.0], [33.9, 35110.0], [34.0, 35150.0], [34.1, 35210.0], [34.2, 35227.0], [34.3, 35231.0], [34.4, 35265.0], [34.5, 35376.0], [34.6, 35482.0], [34.7, 35482.0], [34.8, 35770.0], [34.9, 35861.0], [35.0, 36335.0], [35.1, 36578.0], [35.2, 36630.0], [35.3, 36919.0], [35.4, 37305.0], [35.5, 40368.0], [35.6, 40423.0], [35.7, 40423.0], [35.8, 40541.0], [35.9, 41517.0], [36.0, 41823.0], [36.1, 41903.0], [36.2, 41926.0], [36.3, 42005.0], [36.4, 42103.0], [36.5, 42147.0], [36.6, 42147.0], [36.7, 42428.0], [36.8, 42468.0], [36.9, 42504.0], [37.0, 43718.0], [37.1, 44630.0], [37.2, 45069.0], [37.3, 48029.0], [37.4, 48031.0], [37.5, 48056.0], [37.6, 48143.0], [37.7, 48156.0], [37.8, 48168.0], [37.9, 48219.0], [38.0, 48264.0], [38.1, 48328.0], [38.2, 48416.0], [38.3, 48422.0], [38.4, 48487.0], [38.5, 48487.0], [38.6, 48625.0], [38.7, 48709.0], [38.8, 48747.0], [38.9, 48866.0], [39.0, 48939.0], [39.1, 48957.0], [39.2, 48970.0], [39.3, 49155.0], [39.4, 49202.0], [39.5, 49312.0], [39.6, 49406.0], [39.7, 49464.0], [39.8, 49505.0], [39.9, 49553.0], [40.0, 49579.0], [40.1, 49595.0], [40.2, 49609.0], [40.3, 49651.0], [40.4, 49651.0], [40.5, 49679.0], [40.6, 49683.0], [40.7, 49691.0], [40.8, 49718.0], [40.9, 49760.0], [41.0, 49783.0], [41.1, 49790.0], [41.2, 49829.0], [41.3, 49846.0], [41.4, 49851.0], [41.5, 49938.0], [41.6, 49990.0], [41.7, 50111.0], [41.8, 50112.0], [41.9, 50194.0], [42.0, 50208.0], [42.1, 50245.0], [42.2, 50282.0], [42.3, 50336.0], [42.4, 50336.0], [42.5, 50526.0], [42.6, 55904.0], [42.7, 56031.0], [42.8, 56183.0], [42.9, 56305.0], [43.0, 56509.0], [43.1, 56511.0], [43.2, 56545.0], [43.3, 56570.0], [43.4, 56602.0], [43.5, 56654.0], [43.6, 56805.0], [43.7, 57003.0], [43.8, 57049.0], [43.9, 57050.0], [44.0, 57231.0], [44.1, 57275.0], [44.2, 57373.0], [44.3, 57373.0], [44.4, 57420.0], [44.5, 57906.0], [44.6, 58455.0], [44.7, 58523.0], [44.8, 58996.0], [44.9, 61777.0], [45.0, 64640.0], [45.1, 64754.0], [45.2, 64850.0], [45.3, 64912.0], [45.4, 65029.0], [45.5, 65093.0], [45.6, 65118.0], [45.7, 65125.0], [45.8, 65227.0], [45.9, 65251.0], [46.0, 65259.0], [46.1, 65276.0], [46.2, 65276.0], [46.3, 65298.0], [46.4, 65310.0], [46.5, 65332.0], [46.6, 65343.0], [46.7, 65404.0], [46.8, 65444.0], [46.9, 65460.0], [47.0, 65478.0], [47.1, 65500.0], [47.2, 65529.0], [47.3, 65554.0], [47.4, 65568.0], [47.5, 65584.0], [47.6, 65592.0], [47.7, 65604.0], [47.8, 65610.0], [47.9, 65630.0], [48.0, 65685.0], [48.1, 65685.0], [48.2, 65699.0], [48.3, 65719.0], [48.4, 65728.0], [48.5, 65740.0], [48.6, 65766.0], [48.7, 65787.0], [48.8, 65792.0], [48.9, 65796.0], [49.0, 65816.0], [49.1, 65827.0], [49.2, 65844.0], [49.3, 65902.0], [49.4, 65915.0], [49.5, 65984.0], [49.6, 65985.0], [49.7, 66001.0], [49.8, 66024.0], [49.9, 66059.0], [50.0, 66060.0], [50.1, 66060.0], [50.2, 66125.0], [50.3, 66211.0], [50.4, 66218.0], [50.5, 66281.0], [50.6, 66332.0], [50.7, 66381.0], [50.8, 66395.0], [50.9, 66404.0], [51.0, 66446.0], [51.1, 66466.0], [51.2, 66630.0], [51.3, 66801.0], [51.4, 66968.0], [51.5, 66990.0], [51.6, 67005.0], [51.7, 67194.0], [51.8, 67310.0], [51.9, 67381.0], [52.0, 67381.0], [52.1, 67398.0], [52.2, 67442.0], [52.3, 67683.0], [52.4, 67741.0], [52.5, 67767.0], [52.6, 67811.0], [52.7, 67996.0], [52.8, 71944.0], [52.9, 72571.0], [53.0, 72597.0], [53.1, 72628.0], [53.2, 72803.0], [53.3, 72813.0], [53.4, 72825.0], [53.5, 72881.0], [53.6, 72903.0], [53.7, 72925.0], [53.8, 72996.0], [53.9, 72996.0], [54.0, 73102.0], [54.1, 73177.0], [54.2, 73206.0], [54.3, 73237.0], [54.4, 73252.0], [54.5, 73313.0], [54.6, 73332.0], [54.7, 73337.0], [54.8, 73366.0], [54.9, 73404.0], [55.0, 73423.0], [55.1, 73478.0], [55.2, 73494.0], [55.3, 73494.0], [55.4, 73496.0], [55.5, 73523.0], [55.6, 73580.0], [55.7, 73731.0], [55.8, 73731.0], [55.9, 73768.0], [56.0, 73768.0], [56.1, 73794.0], [56.2, 73819.0], [56.3, 73826.0], [56.4, 73866.0], [56.5, 73927.0], [56.6, 73928.0], [56.7, 74017.0], [56.8, 74034.0], [56.9, 74042.0], [57.0, 74058.0], [57.1, 74059.0], [57.2, 74063.0], [57.3, 74066.0], [57.4, 74090.0], [57.5, 74095.0], [57.6, 74097.0], [57.7, 74097.0], [57.8, 74098.0], [57.9, 74118.0], [58.0, 74138.0], [58.1, 74144.0], [58.2, 74154.0], [58.3, 74159.0], [58.4, 74187.0], [58.5, 74211.0], [58.6, 74216.0], [58.7, 74231.0], [58.8, 74259.0], [58.9, 74263.0], [59.0, 74287.0], [59.1, 74316.0], [59.2, 74330.0], [59.3, 74335.0], [59.4, 74344.0], [59.5, 74347.0], [59.6, 74359.0], [59.7, 74359.0], [59.8, 74374.0], [59.9, 74374.0], [60.0, 74387.0], [60.1, 74396.0], [60.2, 74421.0], [60.3, 74450.0], [60.4, 74455.0], [60.5, 74472.0], [60.6, 74481.0], [60.7, 74498.0], [60.8, 74508.0], [60.9, 74550.0], [61.0, 74553.0], [61.1, 74566.0], [61.2, 74568.0], [61.3, 74568.0], [61.4, 74590.0], [61.5, 74595.0], [61.6, 74595.0], [61.7, 74596.0], [61.8, 74615.0], [61.9, 74632.0], [62.0, 74636.0], [62.1, 74639.0], [62.2, 74652.0], [62.3, 74652.0], [62.4, 74665.0], [62.5, 74666.0], [62.6, 74670.0], [62.7, 74671.0], [62.8, 74672.0], [62.9, 74679.0], [63.0, 74680.0], [63.1, 74680.0], [63.2, 74680.0], [63.3, 74684.0], [63.4, 74686.0], [63.5, 74686.0], [63.6, 74708.0], [63.7, 74721.0], [63.8, 74727.0], [63.9, 74747.0], [64.0, 74749.0], [64.1, 74762.0], [64.2, 74762.0], [64.3, 74762.0], [64.4, 74765.0], [64.5, 74771.0], [64.6, 74779.0], [64.7, 74780.0], [64.8, 74781.0], [64.9, 74786.0], [65.0, 74787.0], [65.1, 74787.0], [65.2, 74788.0], [65.3, 74795.0], [65.4, 74795.0], [65.5, 74802.0], [65.6, 74805.0], [65.7, 74808.0], [65.8, 74809.0], [65.9, 74815.0], [66.0, 74824.0], [66.1, 74826.0], [66.2, 74826.0], [66.3, 74826.0], [66.4, 74828.0], [66.5, 74829.0], [66.6, 74839.0], [66.7, 74841.0], [66.8, 74849.0], [66.9, 74853.0], [67.0, 74853.0], [67.1, 74858.0], [67.2, 74861.0], [67.3, 74868.0], [67.4, 74868.0], [67.5, 74868.0], [67.6, 74873.0], [67.7, 74874.0], [67.8, 74882.0], [67.9, 74883.0], [68.0, 74885.0], [68.1, 74893.0], [68.2, 74906.0], [68.3, 74907.0], [68.4, 74911.0], [68.5, 74920.0], [68.6, 74923.0], [68.7, 74929.0], [68.8, 74929.0], [68.9, 74932.0], [69.0, 74942.0], [69.1, 74943.0], [69.2, 74943.0], [69.3, 74943.0], [69.4, 74949.0], [69.5, 74959.0], [69.6, 74971.0], [69.7, 74980.0], [69.8, 74987.0], [69.9, 74992.0], [70.0, 74992.0], [70.1, 75001.0], [70.2, 75006.0], [70.3, 75009.0], [70.4, 75017.0], [70.5, 75019.0], [70.6, 75024.0], [70.7, 75028.0], [70.8, 75031.0], [70.9, 75031.0], [71.0, 75047.0], [71.1, 75049.0], [71.2, 75049.0], [71.3, 75050.0], [71.4, 75059.0], [71.5, 75065.0], [71.6, 75069.0], [71.7, 75070.0], [71.8, 75073.0], [71.9, 75075.0], [72.0, 75081.0], [72.1, 75083.0], [72.2, 75086.0], [72.3, 75091.0], [72.4, 75092.0], [72.5, 75092.0], [72.6, 75094.0], [72.7, 75108.0], [72.8, 75115.0], [72.9, 75121.0], [73.0, 75121.0], [73.1, 75121.0], [73.2, 75123.0], [73.3, 75125.0], [73.4, 75126.0], [73.5, 75128.0], [73.6, 75128.0], [73.7, 75131.0], [73.8, 75133.0], [73.9, 75135.0], [74.0, 75142.0], [74.1, 75143.0], [74.2, 75147.0], [74.3, 75148.0], [74.4, 75152.0], [74.5, 75155.0], [74.6, 75160.0], [74.7, 75161.0], [74.8, 75175.0], [74.9, 75194.0], [75.0, 75197.0], [75.1, 75197.0], [75.2, 75198.0], [75.3, 75202.0], [75.4, 75206.0], [75.5, 75208.0], [75.6, 75223.0], [75.7, 75224.0], [75.8, 75230.0], [75.9, 75232.0], [76.0, 75233.0], [76.1, 75234.0], [76.2, 75236.0], [76.3, 75238.0], [76.4, 75238.0], [76.5, 75240.0], [76.6, 75240.0], [76.7, 75243.0], [76.8, 75246.0], [76.9, 75256.0], [77.0, 75256.0], [77.1, 75257.0], [77.2, 75258.0], [77.3, 75260.0], [77.4, 75261.0], [77.5, 75263.0], [77.6, 75263.0], [77.7, 75276.0], [77.8, 75281.0], [77.9, 75287.0], [78.0, 75307.0], [78.1, 75327.0], [78.2, 75330.0], [78.3, 75332.0], [78.4, 75336.0], [78.5, 75338.0], [78.6, 75338.0], [78.7, 75341.0], [78.8, 75352.0], [78.9, 75352.0], [79.0, 75354.0], [79.1, 75356.0], [79.2, 75360.0], [79.3, 75372.0], [79.4, 75377.0], [79.5, 75383.0], [79.6, 75384.0], [79.7, 75385.0], [79.8, 75392.0], [79.9, 75397.0], [80.0, 75398.0], [80.1, 75420.0], [80.2, 75423.0], [80.3, 75441.0], [80.4, 75460.0], [80.5, 75465.0], [80.6, 75469.0], [80.7, 75469.0], [80.8, 75469.0], [80.9, 75471.0], [81.0, 75484.0], [81.1, 75488.0], [81.2, 75493.0], [81.3, 75494.0], [81.4, 75496.0], [81.5, 75514.0], [81.6, 75518.0], [81.7, 75532.0], [81.8, 75548.0], [81.9, 75564.0], [82.0, 75577.0], [82.1, 75580.0], [82.2, 75593.0], [82.3, 75593.0], [82.4, 75594.0], [82.5, 75596.0], [82.6, 75602.0], [82.7, 75602.0], [82.8, 75628.0], [82.9, 75669.0], [83.0, 75677.0], [83.1, 75683.0], [83.2, 75711.0], [83.3, 75714.0], [83.4, 75721.0], [83.5, 75729.0], [83.6, 75731.0], [83.7, 75733.0], [83.8, 75742.0], [83.9, 75745.0], [84.0, 75761.0], [84.1, 75789.0], [84.2, 75790.0], [84.3, 75801.0], [84.4, 75817.0], [84.5, 75819.0], [84.6, 75824.0], [84.7, 75824.0], [84.8, 75827.0], [84.9, 75842.0], [85.0, 75852.0], [85.1, 75854.0], [85.2, 75866.0], [85.3, 75873.0], [85.4, 75877.0], [85.5, 75885.0], [85.6, 75906.0], [85.7, 75908.0], [85.8, 75908.0], [85.9, 75952.0], [86.0, 75977.0], [86.1, 76003.0], [86.2, 76013.0], [86.3, 76064.0], [86.4, 76066.0], [86.5, 76085.0], [86.6, 76085.0], [86.7, 76089.0], [86.8, 76109.0], [86.9, 76144.0], [87.0, 76146.0], [87.1, 76166.0], [87.2, 76185.0], [87.3, 76243.0], [87.4, 76250.0], [87.5, 76264.0], [87.6, 76272.0], [87.7, 76300.0], [87.8, 76305.0], [87.9, 76336.0], [88.0, 76338.0], [88.1, 76357.0], [88.2, 76359.0], [88.3, 76369.0], [88.4, 76376.0], [88.5, 76376.0], [88.6, 76384.0], [88.7, 76390.0], [88.8, 76397.0], [88.9, 76405.0], [89.0, 76409.0], [89.1, 76457.0], [89.2, 76466.0], [89.3, 76478.0], [89.4, 76505.0], [89.5, 76511.0], [89.6, 76530.0], [89.7, 76555.0], [89.8, 76562.0], [89.9, 76587.0], [90.0, 76605.0], [90.1, 76610.0], [90.2, 76640.0], [90.3, 76645.0], [90.4, 76645.0], [90.5, 76659.0], [90.6, 76668.0], [90.7, 76672.0], [90.8, 76681.0], [90.9, 76718.0], [91.0, 76745.0], [91.1, 76780.0], [91.2, 76830.0], [91.3, 76853.0], [91.4, 76914.0], [91.5, 76936.0], [91.6, 76955.0], [91.7, 76957.0], [91.8, 76965.0], [91.9, 76977.0], [92.0, 76983.0], [92.1, 77092.0], [92.2, 77113.0], [92.3, 77129.0], [92.4, 77129.0], [92.5, 77132.0], [92.6, 77293.0], [92.7, 77352.0], [92.8, 77353.0], [92.9, 77356.0], [93.0, 77368.0], [93.1, 77388.0], [93.2, 77404.0], [93.3, 77435.0], [93.4, 77452.0], [93.5, 77472.0], [93.6, 77504.0], [93.7, 77541.0], [93.8, 77581.0], [93.9, 77582.0], [94.0, 77598.0], [94.1, 77632.0], [94.2, 77665.0], [94.3, 77665.0], [94.4, 77709.0], [94.5, 77714.0], [94.6, 77716.0], [94.7, 77734.0], [94.8, 77748.0], [94.9, 77780.0], [95.0, 77787.0], [95.1, 77806.0], [95.2, 77841.0], [95.3, 77843.0], [95.4, 77845.0], [95.5, 77881.0], [95.6, 77889.0], [95.7, 77918.0], [95.8, 77921.0], [95.9, 77970.0], [96.0, 77978.0], [96.1, 77980.0], [96.2, 77980.0], [96.3, 78006.0], [96.4, 78009.0], [96.5, 78020.0], [96.6, 78030.0], [96.7, 78050.0], [96.8, 78053.0], [96.9, 78056.0], [97.0, 78059.0], [97.1, 78087.0], [97.2, 78092.0], [97.3, 78117.0], [97.4, 78123.0], [97.5, 78134.0], [97.6, 78171.0], [97.7, 78198.0], [97.8, 78213.0], [97.9, 78215.0], [98.0, 78256.0], [98.1, 78256.0], [98.2, 78320.0], [98.3, 78392.0], [98.4, 78433.0], [98.5, 78525.0], [98.6, 78578.0], [98.7, 78601.0], [98.8, 78605.0], [98.9, 78728.0], [99.0, 78780.0], [99.1, 78802.0], [99.2, 78890.0], [99.3, 78908.0], [99.4, 79217.0], [99.5, 79229.0], [99.6, 79267.0], [99.7, 79328.0], [99.8, 79381.0], [99.9, 79542.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[0.0, 2849.0], [0.1, 2854.0], [0.2, 2886.0], [0.3, 2887.0], [0.4, 2890.0], [0.5, 2890.0], [0.6, 2892.0], [0.7, 2894.0], [0.8, 2995.0], [0.9, 2998.0], [1.0, 3005.0], [1.1, 3024.0], [1.2, 3044.0], [1.3, 3049.0], [1.4, 3051.0], [1.5, 3066.0], [1.6, 3066.0], [1.7, 3082.0], [1.8, 3312.0], [1.9, 3366.0], [2.0, 3374.0], [2.1, 3377.0], [2.2, 4248.0], [2.3, 4389.0], [2.4, 4562.0], [2.5, 4982.0], [2.6, 4990.0], [2.7, 5010.0], [2.8, 5111.0], [2.9, 5390.0], [3.0, 5422.0], [3.1, 5545.0], [3.2, 5641.0], [3.3, 5704.0], [3.4, 5711.0], [3.5, 5712.0], [3.6, 5768.0], [3.7, 5778.0], [3.8, 5842.0], [3.9, 5860.0], [4.0, 5880.0], [4.1, 5881.0], [4.2, 5886.0], [4.3, 5935.0], [4.4, 5945.0], [4.5, 5949.0], [4.6, 5994.0], [4.7, 6034.0], [4.8, 6050.0], [4.9, 6098.0], [5.0, 6173.0], [5.1, 6190.0], [5.2, 6192.0], [5.3, 6226.0], [5.4, 6230.0], [5.5, 6265.0], [5.6, 6279.0], [5.7, 6327.0], [5.8, 6330.0], [5.9, 6349.0], [6.0, 6366.0], [6.1, 6393.0], [6.2, 6425.0], [6.3, 6444.0], [6.4, 6450.0], [6.5, 6455.0], [6.6, 6502.0], [6.7, 6585.0], [6.8, 6602.0], [6.9, 6606.0], [7.0, 6620.0], [7.1, 6727.0], [7.2, 6731.0], [7.3, 6738.0], [7.4, 6786.0], [7.5, 6807.0], [7.6, 6907.0], [7.7, 6912.0], [7.8, 6949.0], [7.9, 7102.0], [8.0, 7106.0], [8.1, 7284.0], [8.2, 7287.0], [8.3, 7306.0], [8.4, 7310.0], [8.5, 8084.0], [8.6, 8159.0], [8.7, 8835.0], [8.8, 8878.0], [8.9, 8938.0], [9.0, 9109.0], [9.1, 9186.0], [9.2, 9337.0], [9.3, 9409.0], [9.4, 9431.0], [9.5, 9542.0], [9.6, 9714.0], [9.7, 9726.0], [9.8, 9743.0], [9.9, 9756.0], [10.0, 9781.0], [10.1, 9792.0], [10.2, 9894.0], [10.3, 9967.0], [10.4, 9978.0], [10.5, 9991.0], [10.6, 10317.0], [10.7, 10368.0], [10.8, 10451.0], [10.9, 10730.0], [11.0, 10951.0], [11.1, 11004.0], [11.2, 11072.0], [11.3, 11231.0], [11.4, 11243.0], [11.5, 11304.0], [11.6, 11327.0], [11.7, 11418.0], [11.8, 11420.0], [11.9, 11424.0], [12.0, 11557.0], [12.1, 11631.0], [12.2, 11672.0], [12.3, 11702.0], [12.4, 11794.0], [12.5, 11823.0], [12.6, 11830.0], [12.7, 11887.0], [12.8, 11922.0], [12.9, 11958.0], [13.0, 11960.0], [13.1, 12077.0], [13.2, 12139.0], [13.3, 12288.0], [13.4, 12377.0], [13.5, 12380.0], [13.6, 12434.0], [13.7, 12508.0], [13.8, 13283.0], [13.9, 13311.0], [14.0, 13335.0], [14.1, 13561.0], [14.2, 13588.0], [14.3, 13628.0], [14.4, 13757.0], [14.5, 14158.0], [14.6, 14169.0], [14.7, 14223.0], [14.8, 14312.0], [14.9, 14369.0], [15.0, 14374.0], [15.1, 14606.0], [15.2, 14763.0], [15.3, 14763.0], [15.4, 14840.0], [15.5, 15116.0], [15.6, 15142.0], [15.7, 15144.0], [15.8, 15146.0], [15.9, 15484.0], [16.0, 15495.0], [16.1, 15515.0], [16.2, 15658.0], [16.3, 15660.0], [16.4, 15718.0], [16.5, 15732.0], [16.6, 15773.0], [16.7, 15786.0], [16.8, 15829.0], [16.9, 15843.0], [17.0, 15855.0], [17.1, 15868.0], [17.2, 15869.0], [17.3, 15926.0], [17.4, 15930.0], [17.5, 15942.0], [17.6, 15967.0], [17.7, 16023.0], [17.8, 16023.0], [17.9, 16051.0], [18.0, 16083.0], [18.1, 16127.0], [18.2, 16133.0], [18.3, 16135.0], [18.4, 16159.0], [18.5, 16205.0], [18.6, 16210.0], [18.7, 16244.0], [18.8, 16244.0], [18.9, 16273.0], [19.0, 16276.0], [19.1, 16314.0], [19.2, 16363.0], [19.3, 16385.0], [19.4, 16396.0], [19.5, 16529.0], [19.6, 16684.0], [19.7, 16765.0], [19.8, 16791.0], [19.9, 16801.0], [20.0, 16856.0], [20.1, 16899.0], [20.2, 16907.0], [20.3, 16918.0], [20.4, 16925.0], [20.5, 16999.0], [20.6, 17036.0], [20.7, 17062.0], [20.8, 17127.0], [20.9, 17161.0], [21.0, 17225.0], [21.1, 17228.0], [21.2, 17369.0], [21.3, 17375.0], [21.4, 17394.0], [21.5, 17411.0], [21.6, 17456.0], [21.7, 17487.0], [21.8, 17564.0], [21.9, 17720.0], [22.0, 17735.0], [22.1, 17770.0], [22.2, 18076.0], [22.3, 18123.0], [22.4, 18128.0], [22.5, 18134.0], [22.6, 18199.0], [22.7, 18218.0], [22.8, 18353.0], [22.9, 18379.0], [23.0, 18399.0], [23.1, 18486.0], [23.2, 18671.0], [23.3, 18746.0], [23.4, 19941.0], [23.5, 19981.0], [23.6, 20270.0], [23.7, 20530.0], [23.8, 20582.0], [23.9, 20600.0], [24.0, 20667.0], [24.1, 20668.0], [24.2, 20716.0], [24.3, 20785.0], [24.4, 20857.0], [24.5, 20859.0], [24.6, 21164.0], [24.7, 21437.0], [24.8, 21565.0], [24.9, 21689.0], [25.0, 21749.0], [25.1, 21913.0], [25.2, 21929.0], [25.3, 22034.0], [25.4, 22740.0], [25.5, 22774.0], [25.6, 22831.0], [25.7, 22958.0], [25.8, 23169.0], [25.9, 23457.0], [26.0, 23465.0], [26.1, 23552.0], [26.2, 23645.0], [26.3, 23673.0], [26.4, 23744.0], [26.5, 23797.0], [26.6, 24222.0], [26.7, 24717.0], [26.8, 24998.0], [26.9, 25346.0], [27.0, 25767.0], [27.1, 26146.0], [27.2, 27247.0], [27.3, 27263.0], [27.4, 27367.0], [27.5, 28099.0], [27.6, 28652.0], [27.7, 28784.0], [27.8, 28812.0], [27.9, 29087.0], [28.0, 29186.0], [28.1, 29414.0], [28.2, 29466.0], [28.3, 29518.0], [28.4, 29598.0], [28.5, 29680.0], [28.6, 29980.0], [28.7, 30179.0], [28.8, 30221.0], [28.9, 30352.0], [29.0, 30382.0], [29.1, 30402.0], [29.2, 30559.0], [29.3, 30622.0], [29.4, 30694.0], [29.5, 30722.0], [29.6, 31166.0], [29.7, 31202.0], [29.8, 31554.0], [29.9, 31678.0], [30.0, 31928.0], [30.1, 32079.0], [30.2, 32295.0], [30.3, 32881.0], [30.4, 33054.0], [30.5, 33297.0], [30.6, 33346.0], [30.7, 33786.0], [30.8, 34022.0], [30.9, 34032.0], [31.0, 34153.0], [31.1, 34234.0], [31.2, 34252.0], [31.3, 34282.0], [31.4, 34350.0], [31.5, 34509.0], [31.6, 34512.0], [31.7, 34620.0], [31.8, 34670.0], [31.9, 34681.0], [32.0, 34739.0], [32.1, 35669.0], [32.2, 35730.0], [32.3, 35736.0], [32.4, 35933.0], [32.5, 36114.0], [32.6, 36284.0], [32.7, 36286.0], [32.8, 36336.0], [32.9, 36397.0], [33.0, 36502.0], [33.1, 36552.0], [33.2, 36671.0], [33.3, 36672.0], [33.4, 36699.0], [33.5, 36892.0], [33.6, 37010.0], [33.7, 37084.0], [33.8, 37113.0], [33.9, 37293.0], [34.0, 37406.0], [34.1, 37441.0], [34.2, 37634.0], [34.3, 37685.0], [34.4, 37692.0], [34.5, 37744.0], [34.6, 37885.0], [34.7, 37929.0], [34.8, 38014.0], [34.9, 38072.0], [35.0, 38936.0], [35.1, 39006.0], [35.2, 39237.0], [35.3, 39377.0], [35.4, 39538.0], [35.5, 39686.0], [35.6, 39781.0], [35.7, 39969.0], [35.8, 39970.0], [35.9, 40599.0], [36.0, 40926.0], [36.1, 40979.0], [36.2, 41115.0], [36.3, 41296.0], [36.4, 41306.0], [36.5, 41368.0], [36.6, 41382.0], [36.7, 41445.0], [36.8, 41465.0], [36.9, 41497.0], [37.0, 41501.0], [37.1, 41543.0], [37.2, 41567.0], [37.3, 41579.0], [37.4, 41609.0], [37.5, 41613.0], [37.6, 41629.0], [37.7, 41649.0], [37.8, 41661.0], [37.9, 41665.0], [38.0, 41669.0], [38.1, 41712.0], [38.2, 41731.0], [38.3, 41781.0], [38.4, 41857.0], [38.5, 41862.0], [38.6, 41906.0], [38.7, 41912.0], [38.8, 41968.0], [38.9, 41973.0], [39.0, 42025.0], [39.1, 42052.0], [39.2, 42072.0], [39.3, 42169.0], [39.4, 42171.0], [39.5, 42194.0], [39.6, 42284.0], [39.7, 42303.0], [39.8, 42372.0], [39.9, 42419.0], [40.0, 42452.0], [40.1, 42544.0], [40.2, 42626.0], [40.3, 42676.0], [40.4, 42683.0], [40.5, 42811.0], [40.6, 42838.0], [40.7, 42844.0], [40.8, 42945.0], [40.9, 42970.0], [41.0, 43017.0], [41.1, 43049.0], [41.2, 43203.0], [41.3, 43213.0], [41.4, 43223.0], [41.5, 43325.0], [41.6, 43441.0], [41.7, 43462.0], [41.8, 43493.0], [41.9, 43516.0], [42.0, 43579.0], [42.1, 43594.0], [42.2, 43603.0], [42.3, 43650.0], [42.4, 43720.0], [42.5, 43759.0], [42.6, 43799.0], [42.7, 44201.0], [42.8, 44221.0], [42.9, 44242.0], [43.0, 44288.0], [43.1, 44291.0], [43.2, 44377.0], [43.3, 44441.0], [43.4, 44725.0], [43.5, 44775.0], [43.6, 44820.0], [43.7, 44929.0], [43.8, 45035.0], [43.9, 45120.0], [44.0, 45131.0], [44.1, 45290.0], [44.2, 45321.0], [44.3, 45392.0], [44.4, 45528.0], [44.5, 45559.0], [44.6, 45874.0], [44.7, 45945.0], [44.8, 46220.0], [44.9, 46425.0], [45.0, 46944.0], [45.1, 47383.0], [45.2, 47787.0], [45.3, 48093.0], [45.4, 48139.0], [45.5, 48398.0], [45.6, 48401.0], [45.7, 48506.0], [45.8, 48563.0], [45.9, 48678.0], [46.0, 48791.0], [46.1, 48858.0], [46.2, 49010.0], [46.3, 49283.0], [46.4, 49297.0], [46.5, 49430.0], [46.6, 49488.0], [46.7, 49517.0], [46.8, 49575.0], [46.9, 49595.0], [47.0, 49611.0], [47.1, 49629.0], [47.2, 49803.0], [47.3, 49841.0], [47.4, 49868.0], [47.5, 49914.0], [47.6, 49955.0], [47.7, 49984.0], [47.8, 50006.0], [47.9, 50110.0], [48.0, 50115.0], [48.1, 50153.0], [48.2, 50159.0], [48.3, 50175.0], [48.4, 50261.0], [48.5, 50272.0], [48.6, 50367.0], [48.7, 50519.0], [48.8, 50536.0], [48.9, 50573.0], [49.0, 50803.0], [49.1, 50915.0], [49.2, 50948.0], [49.3, 50999.0], [49.4, 51097.0], [49.5, 51143.0], [49.6, 51272.0], [49.7, 51480.0], [49.8, 51840.0], [49.9, 51872.0], [50.0, 52076.0], [50.1, 52188.0], [50.2, 52195.0], [50.3, 52201.0], [50.4, 53129.0], [50.5, 53263.0], [50.6, 53274.0], [50.7, 53783.0], [50.8, 54084.0], [50.9, 54285.0], [51.0, 54324.0], [51.1, 54925.0], [51.2, 55278.0], [51.3, 55291.0], [51.4, 55319.0], [51.5, 55443.0], [51.6, 55472.0], [51.7, 55696.0], [51.8, 55766.0], [51.9, 55807.0], [52.0, 55891.0], [52.1, 56064.0], [52.2, 56248.0], [52.3, 56264.0], [52.4, 56269.0], [52.5, 56318.0], [52.6, 56335.0], [52.7, 56413.0], [52.8, 56479.0], [52.9, 56483.0], [53.0, 56489.0], [53.1, 56504.0], [53.2, 56537.0], [53.3, 56541.0], [53.4, 56552.0], [53.5, 56558.0], [53.6, 56612.0], [53.7, 56694.0], [53.8, 56713.0], [53.9, 56750.0], [54.0, 56790.0], [54.1, 56806.0], [54.2, 56974.0], [54.3, 57133.0], [54.4, 57494.0], [54.5, 57646.0], [54.6, 57721.0], [54.7, 57793.0], [54.8, 57797.0], [54.9, 57826.0], [55.0, 57931.0], [55.1, 57945.0], [55.2, 57969.0], [55.3, 58033.0], [55.4, 58069.0], [55.5, 58231.0], [55.6, 58231.0], [55.7, 58413.0], [55.8, 58424.0], [55.9, 58448.0], [56.0, 58518.0], [56.1, 58519.0], [56.2, 58549.0], [56.3, 58552.0], [56.4, 58568.0], [56.5, 58580.0], [56.6, 58588.0], [56.7, 58642.0], [56.8, 58647.0], [56.9, 58648.0], [57.0, 58671.0], [57.1, 58691.0], [57.2, 58718.0], [57.3, 58804.0], [57.4, 58878.0], [57.5, 58880.0], [57.6, 58899.0], [57.7, 58913.0], [57.8, 59006.0], [57.9, 59055.0], [58.0, 59097.0], [58.1, 59165.0], [58.2, 59237.0], [58.3, 59779.0], [58.4, 59847.0], [58.5, 60163.0], [58.6, 61569.0], [58.7, 61645.0], [58.8, 61729.0], [58.9, 61882.0], [59.0, 62022.0], [59.1, 62051.0], [59.2, 62331.0], [59.3, 62499.0], [59.4, 62588.0], [59.5, 62674.0], [59.6, 62718.0], [59.7, 62782.0], [59.8, 62827.0], [59.9, 62903.0], [60.0, 62941.0], [60.1, 62974.0], [60.2, 63032.0], [60.3, 63086.0], [60.4, 63309.0], [60.5, 63381.0], [60.6, 64244.0], [60.7, 64521.0], [60.8, 64895.0], [60.9, 65004.0], [61.0, 65295.0], [61.1, 65360.0], [61.2, 65401.0], [61.3, 65587.0], [61.4, 65601.0], [61.5, 65655.0], [61.6, 65661.0], [61.7, 65744.0], [61.8, 65763.0], [61.9, 65833.0], [62.0, 65851.0], [62.1, 65951.0], [62.2, 66076.0], [62.3, 66117.0], [62.4, 66563.0], [62.5, 66643.0], [62.6, 66692.0], [62.7, 66764.0], [62.8, 66849.0], [62.9, 66914.0], [63.0, 66947.0], [63.1, 67117.0], [63.2, 67128.0], [63.3, 67281.0], [63.4, 67889.0], [63.5, 68244.0], [63.6, 68382.0], [63.7, 68620.0], [63.8, 69203.0], [63.9, 69389.0], [64.0, 69465.0], [64.1, 69739.0], [64.2, 69796.0], [64.3, 69997.0], [64.4, 70134.0], [64.5, 70626.0], [64.6, 71054.0], [64.7, 71128.0], [64.8, 71264.0], [64.9, 71412.0], [65.0, 71524.0], [65.1, 71569.0], [65.2, 71589.0], [65.3, 71626.0], [65.4, 71681.0], [65.5, 72266.0], [65.6, 72276.0], [65.7, 72656.0], [65.8, 72843.0], [65.9, 73149.0], [66.0, 73195.0], [66.1, 73342.0], [66.2, 73382.0], [66.3, 73554.0], [66.4, 73799.0], [66.5, 73870.0], [66.6, 74086.0], [66.7, 74180.0], [66.8, 74229.0], [66.9, 74264.0], [67.0, 74343.0], [67.1, 74372.0], [67.2, 74420.0], [67.3, 74452.0], [67.4, 74495.0], [67.5, 74506.0], [67.6, 74546.0], [67.7, 74599.0], [67.8, 74679.0], [67.9, 74687.0], [68.0, 74702.0], [68.1, 74723.0], [68.2, 74731.0], [68.3, 74740.0], [68.4, 74752.0], [68.5, 74778.0], [68.6, 74789.0], [68.7, 74802.0], [68.8, 74803.0], [68.9, 74814.0], [69.0, 74837.0], [69.1, 74841.0], [69.2, 74843.0], [69.3, 74852.0], [69.4, 74865.0], [69.5, 74876.0], [69.6, 74888.0], [69.7, 74889.0], [69.8, 74896.0], [69.9, 74905.0], [70.0, 74907.0], [70.1, 74920.0], [70.2, 74922.0], [70.3, 74937.0], [70.4, 74949.0], [70.5, 74964.0], [70.6, 74965.0], [70.7, 74997.0], [70.8, 75004.0], [70.9, 75005.0], [71.0, 75009.0], [71.1, 75011.0], [71.2, 75029.0], [71.3, 75031.0], [71.4, 75033.0], [71.5, 75040.0], [71.6, 75053.0], [71.7, 75055.0], [71.8, 75057.0], [71.9, 75064.0], [72.0, 75070.0], [72.1, 75073.0], [72.2, 75076.0], [72.3, 75088.0], [72.4, 75093.0], [72.5, 75097.0], [72.6, 75129.0], [72.7, 75139.0], [72.8, 75149.0], [72.9, 75169.0], [73.0, 75182.0], [73.1, 75205.0], [73.2, 75219.0], [73.3, 75225.0], [73.4, 75245.0], [73.5, 75265.0], [73.6, 75272.0], [73.7, 75281.0], [73.8, 75282.0], [73.9, 75287.0], [74.0, 75292.0], [74.1, 75302.0], [74.2, 75317.0], [74.3, 75323.0], [74.4, 75342.0], [74.5, 75353.0], [74.6, 75354.0], [74.7, 75370.0], [74.8, 75373.0], [74.9, 75392.0], [75.0, 75402.0], [75.1, 75414.0], [75.2, 75431.0], [75.3, 75439.0], [75.4, 75444.0], [75.5, 75462.0], [75.6, 75464.0], [75.7, 75475.0], [75.8, 75490.0], [75.9, 75497.0], [76.0, 75499.0], [76.1, 75517.0], [76.2, 75520.0], [76.3, 75546.0], [76.4, 75548.0], [76.5, 75563.0], [76.6, 75567.0], [76.7, 75572.0], [76.8, 75589.0], [76.9, 75615.0], [77.0, 75623.0], [77.1, 75640.0], [77.2, 75657.0], [77.3, 75669.0], [77.4, 75677.0], [77.5, 75695.0], [77.6, 75699.0], [77.7, 75701.0], [77.8, 75702.0], [77.9, 75707.0], [78.0, 75731.0], [78.1, 75731.0], [78.2, 75752.0], [78.3, 75753.0], [78.4, 75755.0], [78.5, 75756.0], [78.6, 75762.0], [78.7, 75766.0], [78.8, 75779.0], [78.9, 75798.0], [79.0, 75805.0], [79.1, 75813.0], [79.2, 75821.0], [79.3, 75829.0], [79.4, 75846.0], [79.5, 75855.0], [79.6, 75871.0], [79.7, 75871.0], [79.8, 75872.0], [79.9, 75882.0], [80.0, 75890.0], [80.1, 75893.0], [80.2, 75908.0], [80.3, 75919.0], [80.4, 75929.0], [80.5, 75930.0], [80.6, 75933.0], [80.7, 75941.0], [80.8, 75951.0], [80.9, 75960.0], [81.0, 75976.0], [81.1, 76008.0], [81.2, 76012.0], [81.3, 76013.0], [81.4, 76025.0], [81.5, 76029.0], [81.6, 76030.0], [81.7, 76060.0], [81.8, 76061.0], [81.9, 76066.0], [82.0, 76068.0], [82.1, 76072.0], [82.2, 76072.0], [82.3, 76079.0], [82.4, 76200.0], [82.5, 76275.0], [82.6, 76277.0], [82.7, 76291.0], [82.8, 76317.0], [82.9, 76357.0], [83.0, 76366.0], [83.1, 76379.0], [83.2, 76421.0], [83.3, 76440.0], [83.4, 76450.0], [83.5, 76466.0], [83.6, 76475.0], [83.7, 76478.0], [83.8, 76483.0], [83.9, 76501.0], [84.0, 76527.0], [84.1, 76535.0], [84.2, 76552.0], [84.3, 76553.0], [84.4, 76556.0], [84.5, 76562.0], [84.6, 76596.0], [84.7, 76609.0], [84.8, 76630.0], [84.9, 76639.0], [85.0, 76647.0], [85.1, 76666.0], [85.2, 76722.0], [85.3, 76750.0], [85.4, 76811.0], [85.5, 76862.0], [85.6, 76904.0], [85.7, 76929.0], [85.8, 76943.0], [85.9, 76972.0], [86.0, 77019.0], [86.1, 77073.0], [86.2, 77100.0], [86.3, 77130.0], [86.4, 77140.0], [86.5, 77152.0], [86.6, 77191.0], [86.7, 77212.0], [86.8, 77219.0], [86.9, 77253.0], [87.0, 77299.0], [87.1, 77321.0], [87.2, 77322.0], [87.3, 77330.0], [87.4, 77350.0], [87.5, 77377.0], [87.6, 77380.0], [87.7, 77394.0], [87.8, 77396.0], [87.9, 77403.0], [88.0, 77423.0], [88.1, 77452.0], [88.2, 77459.0], [88.3, 77472.0], [88.4, 77516.0], [88.5, 77517.0], [88.6, 77529.0], [88.7, 77559.0], [88.8, 77619.0], [88.9, 77632.0], [89.0, 77637.0], [89.1, 77644.0], [89.2, 77646.0], [89.3, 77681.0], [89.4, 77690.0], [89.5, 77712.0], [89.6, 77713.0], [89.7, 77714.0], [89.8, 77727.0], [89.9, 77747.0], [90.0, 77789.0], [90.1, 77827.0], [90.2, 77852.0], [90.3, 77853.0], [90.4, 77858.0], [90.5, 77902.0], [90.6, 77917.0], [90.7, 77921.0], [90.8, 77927.0], [90.9, 77952.0], [91.0, 77955.0], [91.1, 77959.0], [91.2, 77974.0], [91.3, 78020.0], [91.4, 78055.0], [91.5, 78055.0], [91.6, 78068.0], [91.7, 78074.0], [91.8, 78078.0], [91.9, 78085.0], [92.0, 78111.0], [92.1, 78154.0], [92.2, 78197.0], [92.3, 78238.0], [92.4, 78259.0], [92.5, 78265.0], [92.6, 78314.0], [92.7, 78319.0], [92.8, 78354.0], [92.9, 78354.0], [93.0, 78383.0], [93.1, 78412.0], [93.2, 78442.0], [93.3, 78452.0], [93.4, 78468.0], [93.5, 78478.0], [93.6, 78489.0], [93.7, 78512.0], [93.8, 78518.0], [93.9, 78531.0], [94.0, 78566.0], [94.1, 78601.0], [94.2, 78605.0], [94.3, 78627.0], [94.4, 78666.0], [94.5, 78667.0], [94.6, 78681.0], [94.7, 78695.0], [94.8, 78735.0], [94.9, 78739.0], [95.0, 78833.0], [95.1, 78867.0], [95.2, 78874.0], [95.3, 78894.0], [95.4, 78897.0], [95.5, 78920.0], [95.6, 78952.0], [95.7, 78959.0], [95.8, 78979.0], [95.9, 78982.0], [96.0, 78985.0], [96.1, 79000.0], [96.2, 79037.0], [96.3, 79044.0], [96.4, 79054.0], [96.5, 79066.0], [96.6, 79067.0], [96.7, 79080.0], [96.8, 79081.0], [96.9, 79107.0], [97.0, 79115.0], [97.1, 79123.0], [97.2, 79138.0], [97.3, 79145.0], [97.4, 79155.0], [97.5, 79157.0], [97.6, 79203.0], [97.7, 79209.0], [97.8, 79212.0], [97.9, 79232.0], [98.0, 79256.0], [98.1, 79280.0], [98.2, 79281.0], [98.3, 79287.0], [98.4, 79305.0], [98.5, 79320.0], [98.6, 79342.0], [98.7, 79346.0], [98.8, 79349.0], [98.9, 79355.0], [99.0, 79383.0], [99.1, 79386.0], [99.2, 79388.0], [99.3, 79423.0], [99.4, 79457.0], [99.5, 79467.0], [99.6, 79531.0], [99.7, 79855.0], [99.8, 79874.0], [99.9, 80052.0], [100.0, 94299.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"), function(series){
                series.curvedLines = {apply: true, tension: 1};
                series.threshold = {
                        below: percentileThreshold,
                        color: $("#slider-vertical").children("div").css("background-color")
                };
            });
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2500.0, "maxY": 108.0, "series": [{"data": [[2500.0, 3.0], [3000.0, 1.0], [3500.0, 2.0], [4000.0, 1.0], [66500.0, 4.0], [67500.0, 5.0], [4500.0, 4.0], [72500.0, 10.0], [71500.0, 1.0], [73500.0, 11.0], [74500.0, 88.0], [75500.0, 44.0], [76500.0, 26.0], [77500.0, 25.0], [5000.0, 5.0], [78500.0, 9.0], [79500.0, 1.0], [5500.0, 19.0], [6000.0, 18.0], [8500.0, 1.0], [9000.0, 1.0], [9500.0, 12.0], [10000.0, 20.0], [10500.0, 23.0], [11000.0, 27.0], [11500.0, 10.0], [12000.0, 3.0], [16000.0, 1.0], [16500.0, 2.0], [17000.0, 5.0], [17500.0, 8.0], [18000.0, 3.0], [19000.0, 2.0], [19500.0, 1.0], [23000.0, 1.0], [23500.0, 1.0], [24500.0, 1.0], [25500.0, 17.0], [26000.0, 24.0], [26500.0, 5.0], [27000.0, 15.0], [27500.0, 19.0], [28000.0, 3.0], [29000.0, 1.0], [29500.0, 3.0], [30000.0, 1.0], [30500.0, 1.0], [31000.0, 2.0], [34000.0, 24.0], [34500.0, 19.0], [33000.0, 1.0], [33500.0, 7.0], [35000.0, 12.0], [35500.0, 2.0], [36500.0, 3.0], [36000.0, 1.0], [37000.0, 1.0], [40000.0, 3.0], [40500.0, 1.0], [41500.0, 4.0], [42000.0, 5.0], [42500.0, 1.0], [43500.0, 1.0], [44500.0, 1.0], [45000.0, 1.0], [48000.0, 12.0], [49000.0, 5.0], [48500.0, 7.0], [49500.0, 18.0], [50000.0, 7.0], [50500.0, 1.0], [56500.0, 7.0], [57000.0, 7.0], [56000.0, 3.0], [55500.0, 1.0], [57500.0, 1.0], [58500.0, 2.0], [58000.0, 1.0], [61500.0, 1.0], [64500.0, 4.0], [65000.0, 16.0], [65500.0, 25.0], [66000.0, 14.0], [67000.0, 6.0], [73000.0, 15.0], [74000.0, 39.0], [75000.0, 108.0], [76000.0, 31.0], [77000.0, 14.0], [78000.0, 21.0], [79000.0, 5.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[67500.0, 2.0], [69500.0, 4.0], [71500.0, 6.0], [73500.0, 4.0], [75500.0, 65.0], [77500.0, 37.0], [79500.0, 4.0], [33500.0, 2.0], [34500.0, 7.0], [35500.0, 5.0], [36500.0, 8.0], [37500.0, 8.0], [38500.0, 1.0], [39500.0, 6.0], [40500.0, 4.0], [41500.0, 25.0], [42500.0, 12.0], [43500.0, 10.0], [44500.0, 6.0], [45500.0, 5.0], [46500.0, 2.0], [47500.0, 1.0], [48500.0, 7.0], [49500.0, 14.0], [50500.0, 9.0], [51500.0, 3.0], [52500.0, 1.0], [53500.0, 1.0], [54500.0, 2.0], [55500.0, 5.0], [56500.0, 15.0], [57500.0, 10.0], [58500.0, 23.0], [59500.0, 2.0], [61500.0, 5.0], [62500.0, 10.0], [64500.0, 2.0], [65500.0, 12.0], [67000.0, 4.0], [69000.0, 4.0], [71000.0, 5.0], [73000.0, 5.0], [75000.0, 67.0], [77000.0, 31.0], [79000.0, 45.0], [2500.0, 12.0], [3000.0, 15.0], [3500.0, 1.0], [4000.0, 2.0], [66500.0, 8.0], [68500.0, 1.0], [4500.0, 4.0], [70500.0, 1.0], [72500.0, 3.0], [74500.0, 43.0], [76500.0, 27.0], [5000.0, 5.0], [78500.0, 30.0], [5500.0, 21.0], [6000.0, 24.0], [6500.0, 17.0], [7000.0, 8.0], [8000.0, 2.0], [8500.0, 4.0], [9000.0, 6.0], [9500.0, 14.0], [10000.0, 4.0], [10500.0, 3.0], [11000.0, 11.0], [11500.0, 14.0], [12000.0, 8.0], [12500.0, 1.0], [13000.0, 5.0], [13500.0, 4.0], [14000.0, 8.0], [14500.0, 6.0], [15000.0, 7.0], [15500.0, 20.0], [16000.0, 24.0], [16500.0, 14.0], [17000.0, 15.0], [17500.0, 6.0], [18000.0, 12.0], [18500.0, 3.0], [19500.0, 2.0], [20000.0, 2.0], [20500.0, 11.0], [21000.0, 3.0], [21500.0, 6.0], [22000.0, 2.0], [22500.0, 5.0], [23000.0, 4.0], [23500.0, 6.0], [24000.0, 1.0], [24500.0, 3.0], [25000.0, 1.0], [25500.0, 1.0], [26000.0, 2.0], [27000.0, 4.0], [28000.0, 1.0], [28500.0, 4.0], [29000.0, 5.0], [29500.0, 5.0], [30000.0, 6.0], [30500.0, 5.0], [31000.0, 3.0], [31500.0, 4.0], [32000.0, 2.0], [32500.0, 2.0], [33000.0, 3.0], [34000.0, 9.0], [35000.0, 1.0], [36000.0, 6.0], [37000.0, 7.0], [38000.0, 3.0], [39000.0, 4.0], [41000.0, 11.0], [42000.0, 14.0], [43000.0, 11.0], [44000.0, 9.0], [45000.0, 8.0], [46000.0, 2.0], [47000.0, 1.0], [48000.0, 5.0], [49000.0, 6.0], [50000.0, 12.0], [51000.0, 5.0], [52000.0, 4.0], [53000.0, 3.0], [54000.0, 4.0], [55000.0, 6.0], [56000.0, 13.0], [57000.0, 3.0], [58000.0, 10.0], [59000.0, 6.0], [60000.0, 2.0], [62000.0, 5.0], [63000.0, 6.0], [64000.0, 1.0], [65000.0, 5.0], [66000.0, 3.0], [68000.0, 2.0], [70000.0, 2.0], [72000.0, 3.0], [74000.0, 11.0], [76000.0, 36.0], [78000.0, 31.0], [80000.0, 1.0], [94000.0, 1.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 94000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 48.5, "minX": 1.53018156E12, "maxY": 500.0, "series": [{"data": [[1.53018168E12, 408.29603729603707], [1.53018186E12, 290.52319587628875], [1.53018156E12, 50.0], [1.53018174E12, 500.0], [1.53018192E12, 48.5], [1.53018162E12, 157.27454909819645], [1.5301818E12, 499.71282051282054]], "isOverall": false, "label": "bzm - Concurrency Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.53018192E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3571.0, "minX": 1.0, "maxY": 94299.0, "series": [{"data": [[2.0, 77709.0], [3.0, 77353.0], [4.0, 77472.0], [6.0, 77780.0], [7.0, 77841.0], [8.0, 77665.0], [10.0, 77632.0], [11.0, 77980.0], [12.0, 77716.0], [13.0, 78050.0], [14.0, 78171.0], [15.0, 78213.0], [16.0, 77970.0], [17.0, 78256.0], [18.0, 78053.0], [21.0, 77787.0], [22.0, 77921.0], [23.0, 78433.0], [24.0, 77598.0], [25.0, 77881.0], [29.0, 77918.0], [45.0, 79542.0], [50.0, 5309.400000000001], [51.0, 5898.0], [60.0, 77435.0], [77.0, 79328.0], [82.0, 5959.0], [84.0, 42550.5], [88.0, 6195.0], [92.0, 6224.5], [95.0, 6356.0], [96.0, 6290.0], [100.0, 7440.0], [106.0, 11941.0], [107.0, 78802.0], [110.0, 78578.0], [113.0, 44636.5], [115.0, 79381.0], [112.0, 79217.0], [117.0, 44443.5], [119.0, 78780.0], [118.0, 79229.0], [121.0, 10444.0], [122.0, 45298.0], [123.0, 78009.0], [120.0, 78525.0], [126.0, 78030.0], [125.0, 78092.0], [124.0, 77714.0], [132.0, 77293.0], [131.0, 77582.0], [130.0, 77541.0], [129.0, 77806.0], [137.0, 11540.0], [141.0, 10363.0], [148.0, 10195.0], [149.0, 10186.0], [150.0, 10756.40243902439], [151.0, 78601.0], [168.0, 12030.0], [200.0, 15513.5], [212.0, 76085.0], [210.0, 77581.0], [223.0, 78006.0], [222.0, 78087.0], [221.0, 78320.0], [220.0, 78059.0], [219.0, 78020.0], [217.0, 77132.0], [216.0, 77404.0], [231.0, 76965.0], [230.0, 77843.0], [229.0, 78134.0], [228.0, 77734.0], [227.0, 77978.0], [226.0, 77845.0], [225.0, 78215.0], [224.0, 78117.0], [239.0, 76645.0], [238.0, 76185.0], [237.0, 76830.0], [236.0, 76605.0], [235.0, 76672.0], [234.0, 77113.0], [233.0, 77504.0], [232.0, 77368.0], [247.0, 76243.0], [246.0, 76376.0], [245.0, 76936.0], [244.0, 76390.0], [242.0, 76610.0], [241.0, 76405.0], [250.0, 20875.050000000003], [255.0, 76957.0], [253.0, 75819.0], [252.0, 76064.0], [251.0, 76109.0], [249.0, 76977.0], [248.0, 76659.0], [258.0, 76587.0], [271.0, 75677.0], [266.0, 77452.0], [263.0, 77889.0], [262.0, 77748.0], [261.0, 78056.0], [260.0, 78392.0], [259.0, 78605.0], [257.0, 78198.0], [256.0, 77352.0], [285.0, 23233.0], [284.0, 74154.0], [277.0, 74636.0], [300.0, 26505.422535211266], [304.0, 27429.0], [305.0, 27461.0], [314.0, 27284.0], [350.0, 29773.136363636368], [341.0, 76336.0], [339.0, 76745.0], [353.0, 34432.0], [354.0, 34486.0], [352.0, 75548.0], [374.0, 77129.0], [368.0, 78728.0], [398.0, 75577.0], [399.0, 75761.0], [397.0, 75742.0], [396.0, 75842.0], [395.0, 75824.0], [394.0, 76003.0], [393.0, 75398.0], [392.0, 75441.0], [391.0, 76272.0], [384.0, 75155.0], [386.0, 75121.0], [385.0, 75263.0], [390.0, 75019.0], [389.0, 75383.0], [388.0, 75258.0], [414.0, 76013.0], [400.0, 35255.704918032796], [403.0, 75423.0], [402.0, 75841.0], [407.0, 76144.0], [406.0, 76250.0], [405.0, 75131.0], [404.0, 76466.0], [415.0, 75031.0], [413.0, 76530.0], [412.0, 75877.0], [411.0, 76264.0], [410.0, 76166.0], [409.0, 76359.0], [408.0, 76505.0], [431.0, 75873.0], [424.0, 35861.0], [430.0, 75202.0], [429.0, 75356.0], [428.0, 75801.0], [419.0, 75059.0], [418.0, 76397.0], [417.0, 74042.0], [416.0, 75789.0], [427.0, 75384.0], [426.0, 75488.0], [425.0, 75460.0], [423.0, 75745.0], [422.0, 74868.0], [421.0, 75854.0], [420.0, 75817.0], [433.0, 75257.0], [432.0, 75906.0], [450.0, 42708.73684210526], [463.0, 75469.0], [454.0, 75160.0], [477.0, 75908.0], [476.0, 76511.0], [472.0, 75128.0], [468.0, 74920.0], [466.0, 75596.0], [465.0, 75243.0], [464.0, 75092.0], [486.0, 75852.0], [484.0, 76955.0], [483.0, 76562.0], [481.0, 76668.0], [500.0, 69231.68663594463], [499.0, 74686.0], [496.0, 75276.0], [1.0, 77388.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[366.132911392405, 52671.938818565446]], "isOverall": false, "label": "completarEncuestaPreInscripcion-Aggregated", "isController": false}, {"data": [[5.0, 77712.0], [9.0, 78494.0], [19.0, 78318.0], [20.0, 78111.0], [26.0, 78265.0], [27.0, 77559.0], [28.0, 79115.0], [30.0, 77952.0], [31.0, 79280.0], [33.0, 79359.0], [32.0, 79138.0], [35.0, 78969.0], [34.0, 78867.0], [37.0, 78735.0], [36.0, 78833.0], [39.0, 79283.0], [38.0, 79037.0], [41.0, 79256.0], [40.0, 79320.0], [43.0, 79198.0], [42.0, 79080.0], [44.0, 79081.0], [47.0, 79413.0], [46.0, 79349.0], [49.0, 79531.0], [48.0, 79346.0], [50.0, 5845.226415094341], [51.0, 42461.0], [53.0, 79044.0], [52.0, 78739.0], [55.0, 79089.0], [54.0, 78920.0], [57.0, 79066.0], [56.0, 78531.0], [59.0, 78314.0], [58.0, 77459.0], [61.0, 79325.0], [63.0, 78952.0], [62.0, 77140.0], [67.0, 79855.0], [66.0, 80052.0], [65.0, 79874.0], [64.0, 77299.0], [71.0, 78982.0], [70.0, 79203.0], [69.0, 76553.0], [68.0, 76666.0], [75.0, 79232.0], [74.0, 77429.0], [73.0, 79355.0], [72.0, 77949.0], [79.0, 79423.0], [78.0, 79383.0], [76.0, 79386.0], [83.0, 79623.0], [82.0, 79457.0], [81.0, 78874.0], [80.0, 79155.0], [84.0, 3571.0], [87.0, 94299.0], [86.0, 79388.0], [85.0, 79467.0], [91.0, 77974.0], [90.0, 78452.0], [89.0, 78592.0], [88.0, 78238.0], [95.0, 77917.0], [94.0, 78068.0], [93.0, 77721.0], [92.0, 78110.0], [99.0, 77019.0], [98.0, 77642.0], [97.0, 76639.0], [96.0, 77644.0], [100.0, 8512.978494623652], [101.0, 44889.0], [103.0, 78020.0], [102.0, 77350.0], [105.0, 45097.0], [106.0, 78085.0], [104.0, 78217.0], [111.0, 78060.0], [109.0, 77858.0], [108.0, 77927.0], [115.0, 12380.0], [114.0, 78979.0], [118.0, 11960.0], [116.0, 78907.0], [121.0, 77852.0], [127.0, 77959.0], [135.0, 77827.0], [134.0, 78361.0], [133.0, 77727.0], [128.0, 77902.0], [143.0, 79107.0], [142.0, 79342.0], [141.0, 78627.0], [140.0, 78652.0], [139.0, 77191.0], [138.0, 78605.0], [137.0, 78319.0], [136.0, 77853.0], [150.0, 15636.600000000002], [151.0, 11844.0], [149.0, 79157.0], [148.0, 78695.0], [147.0, 78897.0], [146.0, 79219.0], [145.0, 79000.0], [144.0, 79067.0], [152.0, 45376.5], [156.0, 45445.0], [158.0, 45587.0], [159.0, 45506.0], [157.0, 79209.0], [155.0, 79145.0], [154.0, 79125.0], [153.0, 79212.0], [163.0, 45200.0], [164.0, 45085.0], [167.0, 77955.0], [166.0, 78197.0], [165.0, 77637.0], [162.0, 78512.0], [161.0, 78455.0], [160.0, 78354.0], [175.0, 76750.0], [174.0, 77747.0], [173.0, 77253.0], [172.0, 77219.0], [171.0, 77681.0], [170.0, 77380.0], [169.0, 77396.0], [168.0, 77529.0], [183.0, 79123.0], [182.0, 78412.0], [181.0, 76317.0], [180.0, 78985.0], [179.0, 78667.0], [178.0, 78259.0], [177.0, 78383.0], [176.0, 77789.0], [191.0, 78666.0], [190.0, 78894.0], [189.0, 78584.0], [187.0, 78489.0], [186.0, 78442.0], [185.0, 78681.0], [184.0, 78518.0], [199.0, 44804.5], [198.0, 77423.0], [197.0, 77452.0], [196.0, 77972.0], [195.0, 78055.0], [194.0, 77827.0], [193.0, 78078.0], [192.0, 78601.0], [200.0, 16114.747252747253], [207.0, 77632.0], [206.0, 76929.0], [205.0, 76552.0], [204.0, 76943.0], [203.0, 77330.0], [202.0, 77073.0], [201.0, 77100.0], [215.0, 78354.0], [214.0, 77387.0], [213.0, 77472.0], [211.0, 76450.0], [209.0, 76466.0], [208.0, 76981.0], [220.0, 17808.0], [218.0, 76527.0], [226.0, 17603.0], [227.0, 16127.0], [243.0, 76539.0], [240.0, 76475.0], [250.0, 19356.76923076923], [251.0, 22985.0], [254.0, 76596.0], [256.0, 23169.0], [270.0, 75893.0], [269.0, 77516.0], [268.0, 76379.0], [267.0, 77608.0], [265.0, 77713.0], [264.0, 77921.0], [286.0, 75669.0], [287.0, 76811.0], [285.0, 77646.0], [275.0, 74889.0], [274.0, 75825.0], [273.0, 75702.0], [272.0, 76440.0], [283.0, 75867.0], [282.0, 77517.0], [281.0, 76277.0], [280.0, 76071.0], [279.0, 75354.0], [278.0, 75011.0], [276.0, 75414.0], [303.0, 75917.0], [296.0, 50389.5], [300.0, 27527.19047619048], [291.0, 77130.0], [290.0, 77394.0], [289.0, 77377.0], [288.0, 77260.0], [302.0, 76574.0], [301.0, 76631.0], [299.0, 76421.0], [298.0, 77127.0], [297.0, 76562.0], [295.0, 77335.0], [294.0, 77619.0], [293.0, 77690.0], [292.0, 77479.0], [318.0, 75939.0], [319.0, 76025.0], [317.0, 76200.0], [316.0, 76368.0], [315.0, 75731.0], [314.0, 76609.0], [313.0, 76630.0], [312.0, 76455.0], [311.0, 75872.0], [305.0, 75707.0], [304.0, 75933.0], [307.0, 75929.0], [306.0, 75960.0], [310.0, 76110.5], [309.0, 75871.0], [334.0, 76079.0], [335.0, 77714.0], [333.0, 76275.0], [332.0, 75964.0], [331.0, 75976.0], [330.0, 76029.0], [329.0, 75753.0], [328.0, 75821.0], [327.0, 75762.0], [321.0, 75785.0], [320.0, 76030.0], [323.0, 76072.0], [322.0, 75805.0], [326.0, 75951.0], [325.0, 76060.0], [324.0, 76066.0], [350.0, 32224.313725490207], [351.0, 75890.0], [349.0, 75657.0], [348.0, 75813.0], [347.0, 76012.0], [346.0, 75798.0], [345.0, 75683.0], [344.0, 75755.0], [343.0, 75761.0], [336.0, 75941.0], [338.0, 76021.0], [337.0, 75572.0], [342.0, 75706.0], [340.0, 76904.0], [366.0, 76725.0], [367.0, 76535.0], [365.0, 78074.0], [364.0, 78863.0], [363.0, 75225.0], [362.0, 75615.0], [361.0, 75439.0], [360.0, 75546.0], [359.0, 75517.0], [353.0, 75733.0], [355.0, 75589.0], [354.0, 75646.0], [358.0, 75484.0], [357.0, 75370.0], [356.0, 75695.0], [382.0, 75027.0], [383.0, 72120.0], [381.0, 75548.0], [380.0, 75317.0], [379.0, 75005.0], [378.0, 76047.0], [377.0, 76647.0], [376.0, 75219.0], [375.0, 74802.0], [369.0, 77152.0], [371.0, 74420.0], [370.0, 78566.0], [373.0, 76903.0], [372.0, 76478.0], [387.0, 75076.0], [400.0, 35640.99999999999], [418.0, 35933.0], [425.0, 35869.0], [424.0, 75623.0], [446.0, 76862.0], [447.0, 76972.0], [445.0, 75342.0], [444.0, 74599.0], [443.0, 74964.0], [442.0, 74859.0], [441.0, 74893.0], [440.0, 75701.0], [439.0, 74837.0], [435.0, 75752.0], [434.0, 75779.0], [438.0, 74949.0], [437.0, 75677.0], [436.0, 75520.0], [461.0, 75353.0], [450.0, 40088.0684931507], [462.0, 75567.0], [460.0, 75392.0], [451.0, 76483.0], [459.0, 75416.5], [457.0, 75640.0], [456.0, 74997.0], [455.0, 75561.0], [449.0, 75930.0], [448.0, 76722.0], [453.0, 75444.0], [452.0, 76008.0], [479.0, 75846.0], [478.0, 76301.0], [475.0, 74752.0], [474.0, 76357.0], [473.0, 75499.0], [471.0, 75040.0], [470.0, 75281.0], [469.0, 74937.0], [467.0, 75402.0], [495.0, 75129.33333333333], [493.0, 74778.0], [491.0, 75581.0], [490.0, 75756.0], [489.0, 76072.0], [488.0, 76173.0], [487.0, 76291.0], [485.0, 76501.0], [482.0, 76068.0], [480.0, 76493.0], [499.0, 42838.0], [500.0, 59786.269487750615], [498.0, 75282.0], [497.0, 75169.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}, {"data": [[329.38317757009327, 48751.76557632404]], "isOverall": false, "label": "obtenerEncuesta-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.53018156E12, "maxY": 238277.21666666667, "series": [{"data": [[1.53018168E12, 0.0], [1.53018186E12, 0.0], [1.53018156E12, 0.0], [1.53018174E12, 0.0], [1.53018192E12, 0.0], [1.53018162E12, 0.0], [1.5301818E12, 0.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.53018168E12, 184909.41666666666], [1.53018186E12, 186049.81666666668], [1.53018156E12, 17552.683333333334], [1.53018174E12, 184736.63333333333], [1.53018192E12, 51391.01666666667], [1.53018162E12, 238277.21666666667], [1.5301818E12, 83274.66666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.53018192E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2993.0833333333335, "minX": 1.53018156E12, "maxY": 78958.68571428576, "series": [{"data": [[1.53018168E12, 31525.522471910113], [1.53018186E12, 76642.5037037037], [1.53018174E12, 59656.23225806454], [1.53018192E12, 78000.0], [1.53018162E12, 10287.582857142856], [1.5301818E12, 74909.22580645164]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[1.53018168E12, 39502.36653386454], [1.53018186E12, 76835.92094861656], [1.53018156E12, 2993.0833333333335], [1.53018174E12, 59731.20717131475], [1.53018192E12, 78958.68571428576], [1.53018162E12, 13317.904320987655], [1.5301818E12, 75100.98198198198]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.53018192E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2991.0000000000005, "minX": 1.53018156E12, "maxY": 78952.48571428569, "series": [{"data": [[1.53018168E12, 31525.499999999996], [1.53018186E12, 76642.5037037037], [1.53018174E12, 59656.2258064516], [1.53018192E12, 78000.0], [1.53018162E12, 10287.571428571426], [1.5301818E12, 74909.20071684592]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[1.53018168E12, 39494.107569721105], [1.53018186E12, 76829.55731225297], [1.53018156E12, 2991.0000000000005], [1.53018174E12, 59724.91235059761], [1.53018192E12, 78952.48571428569], [1.53018162E12, 13309.345679012351], [1.5301818E12, 75094.75675675669]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.53018192E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3001.5, "minX": 24.0, "maxY": 78663.5, "series": [{"data": [[24.0, 3001.5], [390.0, 74992.0], [388.0, 76553.5], [96.0, 78663.5], [406.0, 58659.5], [429.0, 35231.0], [499.0, 11291.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 499.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            }
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3000.5, "minX": 24.0, "maxY": 78653.0, "series": [{"data": [[24.0, 3000.5], [390.0, 74992.0], [388.0, 76553.0], [96.0, 78653.0], [406.0, 58658.0], [429.0, 35231.0], [499.0, 11291.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 499.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            }
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2333333333333334, "minX": 1.53018156E12, "maxY": 12.483333333333333, "series": [{"data": [[1.53018168E12, 10.483333333333333], [1.53018156E12, 1.2333333333333334], [1.53018174E12, 6.766666666666667], [1.53018162E12, 12.483333333333333], [1.5301818E12, 6.233333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5301818E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.53018156E12, "maxY": 8.316666666666666, "series": [{"data": [[1.53018168E12, 7.15], [1.53018186E12, 6.466666666666667], [1.53018156E12, 0.4], [1.53018174E12, 6.766666666666667], [1.53018192E12, 1.6], [1.53018162E12, 8.316666666666666], [1.5301818E12, 6.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.53018192E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.53018156E12, "maxY": 5.4, "series": [{"data": [[1.53018168E12, 4.183333333333334], [1.53018186E12, 4.216666666666667], [1.53018156E12, 0.4], [1.53018174E12, 4.183333333333334], [1.53018192E12, 1.1666666666666667], [1.53018162E12, 5.4], [1.5301818E12, 1.85]], "isOverall": false, "label": "obtenerEncuesta-success", "isController": false}, {"data": [[1.53018168E12, 2.966666666666667], [1.53018186E12, 2.25], [1.53018174E12, 2.5833333333333335], [1.53018192E12, 0.43333333333333335], [1.53018162E12, 2.9166666666666665], [1.5301818E12, 4.65]], "isOverall": false, "label": "completarEncuestaPreInscripcion-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.53018192E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#responseTimesOverTime";
        } else if (elem.id == "bodyLantenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

// create slider
$(function() {
    $( "#slider-vertical" ).slider({
      orientation: "vertical",
      range: "min",
      min: responseTimePercentilesInfos.data.result.minY,
      max: responseTimePercentilesInfos.data.result.maxY,
      value: 0,
      stop: function(event, ui ) {
       percentileThreshold= ui.value;
       refreshResponseTimePercentiles();
       $("#amount").val(percentileThreshold);
      }
    });
    $("#amount" ).val( $( "#slider-vertical" ).slider( "value" ) );
    $("#slider-vertical").children("div").css("background-color","purple");
    $("#amount" ).css("color", $("#slider-vertical").children("div").css("background-color"));
    $("#slider-vertical").children("div").css("opacity","0.3");
});

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
