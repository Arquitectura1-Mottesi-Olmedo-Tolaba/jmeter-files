/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? -10800000 : 0;
        var yOffset = options.yaxis.mode === "time" ? -10800000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3464519.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 3.0], [12.7, 3.0], [12.8, 3.0], [12.9, 3.0], [13.0, 3.0], [13.1, 3.0], [13.2, 3.0], [13.3, 3.0], [13.4, 3.0], [13.5, 3.0], [13.6, 3.0], [13.7, 3.0], [13.8, 3.0], [13.9, 3.0], [14.0, 3.0], [14.1, 3.0], [14.2, 3.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 13.0], [15.1, 13.0], [15.2, 13.0], [15.3, 13.0], [15.4, 13.0], [15.5, 13.0], [15.6, 15.0], [15.7, 15.0], [15.8, 17.0], [15.9, 17.0], [16.0, 25.0], [16.1, 25.0], [16.2, 156.0], [16.3, 156.0], [16.4, 164.0], [16.5, 164.0], [16.6, 164.0], [16.7, 164.0], [16.8, 169.0], [16.9, 169.0], [17.0, 170.0], [17.1, 170.0], [17.2, 170.0], [17.3, 170.0], [17.4, 170.0], [17.5, 170.0], [17.6, 170.0], [17.7, 170.0], [17.8, 170.0], [17.9, 170.0], [18.0, 171.0], [18.1, 171.0], [18.2, 172.0], [18.3, 172.0], [18.4, 173.0], [18.5, 173.0], [18.6, 173.0], [18.7, 173.0], [18.8, 175.0], [18.9, 175.0], [19.0, 181.0], [19.1, 181.0], [19.2, 183.0], [19.3, 183.0], [19.4, 183.0], [19.5, 183.0], [19.6, 183.0], [19.7, 183.0], [19.8, 183.0], [19.9, 183.0], [20.0, 184.0], [20.1, 184.0], [20.2, 184.0], [20.3, 184.0], [20.4, 184.0], [20.5, 184.0], [20.6, 185.0], [20.7, 185.0], [20.8, 188.0], [20.9, 188.0], [21.0, 190.0], [21.1, 190.0], [21.2, 191.0], [21.3, 191.0], [21.4, 191.0], [21.5, 191.0], [21.6, 191.0], [21.7, 191.0], [21.8, 207.0], [21.9, 207.0], [22.0, 211.0], [22.1, 211.0], [22.2, 211.0], [22.3, 211.0], [22.4, 211.0], [22.5, 211.0], [22.6, 212.0], [22.7, 212.0], [22.8, 212.0], [22.9, 212.0], [23.0, 212.0], [23.1, 212.0], [23.2, 213.0], [23.3, 213.0], [23.4, 214.0], [23.5, 214.0], [23.6, 214.0], [23.7, 214.0], [23.8, 214.0], [23.9, 214.0], [24.0, 214.0], [24.1, 214.0], [24.2, 215.0], [24.3, 215.0], [24.4, 217.0], [24.5, 217.0], [24.6, 218.0], [24.7, 218.0], [24.8, 219.0], [24.9, 219.0], [25.0, 219.0], [25.1, 219.0], [25.2, 220.0], [25.3, 220.0], [25.4, 224.0], [25.5, 224.0], [25.6, 225.0], [25.7, 225.0], [25.8, 227.0], [25.9, 227.0], [26.0, 229.0], [26.1, 229.0], [26.2, 235.0], [26.3, 235.0], [26.4, 239.0], [26.5, 239.0], [26.6, 241.0], [26.7, 241.0], [26.8, 241.0], [26.9, 241.0], [27.0, 241.0], [27.1, 241.0], [27.2, 242.0], [27.3, 242.0], [27.4, 247.0], [27.5, 247.0], [27.6, 249.0], [27.7, 249.0], [27.8, 250.0], [27.9, 250.0], [28.0, 251.0], [28.1, 251.0], [28.2, 252.0], [28.3, 252.0], [28.4, 252.0], [28.5, 252.0], [28.6, 253.0], [28.7, 253.0], [28.8, 254.0], [28.9, 254.0], [29.0, 255.0], [29.1, 255.0], [29.2, 255.0], [29.3, 255.0], [29.4, 256.0], [29.5, 256.0], [29.6, 257.0], [29.7, 257.0], [29.8, 257.0], [29.9, 257.0], [30.0, 258.0], [30.1, 258.0], [30.2, 258.0], [30.3, 258.0], [30.4, 259.0], [30.5, 259.0], [30.6, 261.0], [30.7, 261.0], [30.8, 262.0], [30.9, 262.0], [31.0, 263.0], [31.1, 263.0], [31.2, 263.0], [31.3, 263.0], [31.4, 263.0], [31.5, 263.0], [31.6, 264.0], [31.7, 264.0], [31.8, 265.0], [31.9, 265.0], [32.0, 266.0], [32.1, 266.0], [32.2, 266.0], [32.3, 266.0], [32.4, 266.0], [32.5, 266.0], [32.6, 266.0], [32.7, 266.0], [32.8, 266.0], [32.9, 266.0], [33.0, 267.0], [33.1, 267.0], [33.2, 268.0], [33.3, 268.0], [33.4, 269.0], [33.5, 269.0], [33.6, 269.0], [33.7, 269.0], [33.8, 270.0], [33.9, 270.0], [34.0, 270.0], [34.1, 270.0], [34.2, 270.0], [34.3, 270.0], [34.4, 271.0], [34.5, 271.0], [34.6, 272.0], [34.7, 272.0], [34.8, 273.0], [34.9, 273.0], [35.0, 273.0], [35.1, 273.0], [35.2, 273.0], [35.3, 273.0], [35.4, 275.0], [35.5, 275.0], [35.6, 276.0], [35.7, 276.0], [35.8, 277.0], [35.9, 277.0], [36.0, 277.0], [36.1, 277.0], [36.2, 277.0], [36.3, 277.0], [36.4, 277.0], [36.5, 277.0], [36.6, 277.0], [36.7, 277.0], [36.8, 277.0], [36.9, 277.0], [37.0, 278.0], [37.1, 278.0], [37.2, 279.0], [37.3, 279.0], [37.4, 281.0], [37.5, 281.0], [37.6, 281.0], [37.7, 281.0], [37.8, 282.0], [37.9, 282.0], [38.0, 282.0], [38.1, 282.0], [38.2, 282.0], [38.3, 282.0], [38.4, 288.0], [38.5, 288.0], [38.6, 292.0], [38.7, 292.0], [38.8, 292.0], [38.9, 292.0], [39.0, 292.0], [39.1, 292.0], [39.2, 293.0], [39.3, 293.0], [39.4, 293.0], [39.5, 294.0], [39.6, 294.0], [39.7, 294.0], [39.8, 294.0], [39.9, 296.0], [40.0, 296.0], [40.1, 298.0], [40.2, 298.0], [40.3, 299.0], [40.4, 299.0], [40.5, 299.0], [40.6, 299.0], [40.7, 300.0], [40.8, 300.0], [40.9, 305.0], [41.0, 305.0], [41.1, 306.0], [41.2, 306.0], [41.3, 307.0], [41.4, 307.0], [41.5, 309.0], [41.6, 309.0], [41.7, 312.0], [41.8, 312.0], [41.9, 315.0], [42.0, 315.0], [42.1, 322.0], [42.2, 322.0], [42.3, 323.0], [42.4, 323.0], [42.5, 324.0], [42.6, 324.0], [42.7, 326.0], [42.8, 326.0], [42.9, 326.0], [43.0, 326.0], [43.1, 333.0], [43.2, 333.0], [43.3, 339.0], [43.4, 339.0], [43.5, 339.0], [43.6, 339.0], [43.7, 341.0], [43.8, 341.0], [43.9, 342.0], [44.0, 342.0], [44.1, 342.0], [44.2, 342.0], [44.3, 344.0], [44.4, 344.0], [44.5, 344.0], [44.6, 344.0], [44.7, 350.0], [44.8, 350.0], [44.9, 351.0], [45.0, 351.0], [45.1, 373.0], [45.2, 373.0], [45.3, 376.0], [45.4, 376.0], [45.5, 383.0], [45.6, 383.0], [45.7, 383.0], [45.8, 383.0], [45.9, 409.0], [46.0, 409.0], [46.1, 410.0], [46.2, 410.0], [46.3, 410.0], [46.4, 410.0], [46.5, 410.0], [46.6, 410.0], [46.7, 410.0], [46.8, 410.0], [46.9, 441.0], [47.0, 441.0], [47.1, 443.0], [47.2, 443.0], [47.3, 444.0], [47.4, 444.0], [47.5, 445.0], [47.6, 445.0], [47.7, 446.0], [47.8, 446.0], [47.9, 451.0], [48.0, 451.0], [48.1, 451.0], [48.2, 451.0], [48.3, 457.0], [48.4, 457.0], [48.5, 457.0], [48.6, 457.0], [48.7, 457.0], [48.8, 457.0], [48.9, 461.0], [49.0, 461.0], [49.1, 461.0], [49.2, 461.0], [49.3, 468.0], [49.4, 468.0], [49.5, 498.0], [49.6, 498.0], [49.7, 499.0], [49.8, 499.0], [49.9, 499.0], [50.0, 499.0], [50.1, 499.0], [50.2, 499.0], [50.3, 500.0], [50.4, 500.0], [50.5, 501.0], [50.6, 501.0], [50.7, 501.0], [50.8, 501.0], [50.9, 502.0], [51.0, 502.0], [51.1, 503.0], [51.2, 503.0], [51.3, 503.0], [51.4, 503.0], [51.5, 506.0], [51.6, 506.0], [51.7, 506.0], [51.8, 506.0], [51.9, 515.0], [52.0, 515.0], [52.1, 516.0], [52.2, 516.0], [52.3, 518.0], [52.4, 518.0], [52.5, 518.0], [52.6, 518.0], [52.7, 524.0], [52.8, 524.0], [52.9, 528.0], [53.0, 528.0], [53.1, 530.0], [53.2, 530.0], [53.3, 540.0], [53.4, 540.0], [53.5, 545.0], [53.6, 545.0], [53.7, 547.0], [53.8, 547.0], [53.9, 547.0], [54.0, 547.0], [54.1, 549.0], [54.2, 549.0], [54.3, 601.0], [54.4, 601.0], [54.5, 611.0], [54.6, 611.0], [54.7, 611.0], [54.8, 611.0], [54.9, 617.0], [55.0, 617.0], [55.1, 618.0], [55.2, 618.0], [55.3, 619.0], [55.4, 619.0], [55.5, 621.0], [55.6, 621.0], [55.7, 624.0], [55.8, 624.0], [55.9, 624.0], [56.0, 624.0], [56.1, 624.0], [56.2, 624.0], [56.3, 625.0], [56.4, 625.0], [56.5, 625.0], [56.6, 625.0], [56.7, 626.0], [56.8, 626.0], [56.9, 626.0], [57.0, 626.0], [57.1, 628.0], [57.2, 628.0], [57.3, 631.0], [57.4, 631.0], [57.5, 632.0], [57.6, 632.0], [57.7, 633.0], [57.8, 633.0], [57.9, 633.0], [58.0, 633.0], [58.1, 635.0], [58.2, 635.0], [58.3, 641.0], [58.4, 641.0], [58.5, 641.0], [58.6, 641.0], [58.7, 641.0], [58.8, 641.0], [58.9, 644.0], [59.0, 644.0], [59.1, 645.0], [59.2, 645.0], [59.3, 645.0], [59.4, 645.0], [59.5, 646.0], [59.6, 646.0], [59.7, 647.0], [59.8, 647.0], [59.9, 649.0], [60.0, 649.0], [60.1, 650.0], [60.2, 650.0], [60.3, 651.0], [60.4, 651.0], [60.5, 651.0], [60.6, 651.0], [60.7, 652.0], [60.8, 652.0], [60.9, 654.0], [61.0, 654.0], [61.1, 655.0], [61.2, 655.0], [61.3, 657.0], [61.4, 657.0], [61.5, 657.0], [61.6, 657.0], [61.7, 657.0], [61.8, 657.0], [61.9, 657.0], [62.0, 657.0], [62.1, 657.0], [62.2, 657.0], [62.3, 658.0], [62.4, 658.0], [62.5, 661.0], [62.6, 661.0], [62.7, 663.0], [62.8, 663.0], [62.9, 663.0], [63.0, 663.0], [63.1, 668.0], [63.2, 668.0], [63.3, 670.0], [63.4, 670.0], [63.5, 670.0], [63.6, 670.0], [63.7, 671.0], [63.8, 671.0], [63.9, 674.0], [64.0, 674.0], [64.1, 674.0], [64.2, 674.0], [64.3, 674.0], [64.4, 674.0], [64.5, 677.0], [64.6, 677.0], [64.7, 679.0], [64.8, 679.0], [64.9, 680.0], [65.0, 680.0], [65.1, 692.0], [65.2, 692.0], [65.3, 692.0], [65.4, 692.0], [65.5, 693.0], [65.6, 693.0], [65.7, 693.0], [65.8, 693.0], [65.9, 694.0], [66.0, 694.0], [66.1, 727.0], [66.2, 727.0], [66.3, 733.0], [66.4, 733.0], [66.5, 742.0], [66.6, 742.0], [66.7, 742.0], [66.8, 742.0], [66.9, 743.0], [67.0, 743.0], [67.1, 744.0], [67.2, 744.0], [67.3, 745.0], [67.4, 745.0], [67.5, 746.0], [67.6, 746.0], [67.7, 761.0], [67.8, 761.0], [67.9, 762.0], [68.0, 762.0], [68.1, 763.0], [68.2, 763.0], [68.3, 764.0], [68.4, 764.0], [68.5, 766.0], [68.6, 766.0], [68.7, 767.0], [68.8, 767.0], [68.9, 767.0], [69.0, 767.0], [69.1, 768.0], [69.2, 768.0], [69.3, 769.0], [69.4, 769.0], [69.5, 771.0], [69.6, 771.0], [69.7, 773.0], [69.8, 773.0], [69.9, 776.0], [70.0, 776.0], [70.1, 778.0], [70.2, 778.0], [70.3, 778.0], [70.4, 778.0], [70.5, 778.0], [70.6, 778.0], [70.7, 780.0], [70.8, 780.0], [70.9, 781.0], [71.0, 781.0], [71.1, 781.0], [71.2, 781.0], [71.3, 917.0], [71.4, 917.0], [71.5, 935.0], [71.6, 935.0], [71.7, 941.0], [71.8, 941.0], [71.9, 941.0], [72.0, 941.0], [72.1, 943.0], [72.2, 943.0], [72.3, 944.0], [72.4, 944.0], [72.5, 944.0], [72.6, 944.0], [72.7, 945.0], [72.8, 945.0], [72.9, 946.0], [73.0, 946.0], [73.1, 946.0], [73.2, 946.0], [73.3, 948.0], [73.4, 948.0], [73.5, 949.0], [73.6, 949.0], [73.7, 949.0], [73.8, 949.0], [73.9, 949.0], [74.0, 949.0], [74.1, 950.0], [74.2, 950.0], [74.3, 952.0], [74.4, 952.0], [74.5, 953.0], [74.6, 953.0], [74.7, 954.0], [74.8, 954.0], [74.9, 955.0], [75.0, 955.0], [75.1, 957.0], [75.2, 957.0], [75.3, 957.0], [75.4, 957.0], [75.5, 957.0], [75.6, 957.0], [75.7, 959.0], [75.8, 959.0], [75.9, 959.0], [76.0, 959.0], [76.1, 960.0], [76.2, 960.0], [76.3, 961.0], [76.4, 961.0], [76.5, 964.0], [76.6, 964.0], [76.7, 964.0], [76.8, 964.0], [76.9, 965.0], [77.0, 965.0], [77.1, 966.0], [77.2, 966.0], [77.3, 968.0], [77.4, 968.0], [77.5, 968.0], [77.6, 968.0], [77.7, 968.0], [77.8, 968.0], [77.9, 972.0], [78.0, 972.0], [78.1, 975.0], [78.2, 975.0], [78.3, 975.0], [78.4, 975.0], [78.5, 977.0], [78.6, 977.0], [78.7, 979.0], [78.8, 979.0], [78.9, 980.0], [79.0, 980.0], [79.1, 980.0], [79.2, 980.0], [79.3, 981.0], [79.4, 981.0], [79.5, 981.0], [79.6, 981.0], [79.7, 982.0], [79.8, 982.0], [79.9, 984.0], [80.0, 984.0], [80.1, 985.0], [80.2, 985.0], [80.3, 987.0], [80.4, 987.0], [80.5, 988.0], [80.6, 988.0], [80.7, 990.0], [80.8, 990.0], [80.9, 990.0], [81.0, 990.0], [81.1, 1002.0], [81.2, 1002.0], [81.3, 1003.0], [81.4, 1003.0], [81.5, 1014.0], [81.6, 1014.0], [81.7, 1015.0], [81.8, 1015.0], [81.9, 1020.0], [82.0, 1020.0], [82.1, 1030.0], [82.2, 1030.0], [82.3, 1034.0], [82.4, 1034.0], [82.5, 1054.0], [82.6, 1054.0], [82.7, 1055.0], [82.8, 1055.0], [82.9, 1057.0], [83.0, 1057.0], [83.1, 1059.0], [83.2, 1059.0], [83.3, 1060.0], [83.4, 1060.0], [83.5, 1063.0], [83.6, 1063.0], [83.7, 1064.0], [83.8, 1064.0], [83.9, 1065.0], [84.0, 1065.0], [84.1, 1066.0], [84.2, 1066.0], [84.3, 1066.0], [84.4, 1066.0], [84.5, 1067.0], [84.6, 1067.0], [84.7, 1067.0], [84.8, 1067.0], [84.9, 1075.0], [85.0, 1075.0], [85.1, 1078.0], [85.2, 1078.0], [85.3, 1078.0], [85.4, 1078.0], [85.5, 1084.0], [85.6, 1084.0], [85.7, 1091.0], [85.8, 1091.0], [85.9, 1102.0], [86.0, 1102.0], [86.1, 1115.0], [86.2, 1115.0], [86.3, 1115.0], [86.4, 1115.0], [86.5, 1116.0], [86.6, 1116.0], [86.7, 1116.0], [86.8, 1116.0], [86.9, 377767.0], [87.0, 377767.0], [87.1, 381980.0], [87.2, 381980.0], [87.3, 382682.0], [87.4, 382682.0], [87.5, 382705.0], [87.6, 382705.0], [87.7, 382759.0], [87.8, 382759.0], [87.9, 382852.0], [88.0, 382852.0], [88.1, 383268.0], [88.2, 383268.0], [88.3, 383384.0], [88.4, 383384.0], [88.5, 383392.0], [88.6, 383392.0], [88.7, 385383.0], [88.8, 385383.0], [88.9, 385399.0], [89.0, 385399.0], [89.1, 385481.0], [89.2, 385481.0], [89.3, 385688.0], [89.4, 385688.0], [89.5, 385899.0], [89.6, 385899.0], [89.7, 386016.0], [89.8, 386016.0], [89.9, 386039.0], [90.0, 386039.0], [90.1, 386205.0], [90.2, 386205.0], [90.3, 386233.0], [90.4, 386233.0], [90.5, 386284.0], [90.6, 386284.0], [90.7, 386288.0], [90.8, 386288.0], [90.9, 386320.0], [91.0, 386320.0], [91.1, 386572.0], [91.2, 386572.0], [91.3, 386647.0], [91.4, 386647.0], [91.5, 386668.0], [91.6, 386668.0], [91.7, 389690.0], [91.8, 389690.0], [91.9, 389693.0], [92.0, 389693.0], [92.1, 389724.0], [92.2, 389724.0], [92.3, 454253.0], [92.4, 454253.0], [92.5, 871093.0], [92.6, 871093.0], [92.7, 877749.0], [92.8, 877749.0], [92.9, 893058.0], [93.0, 893058.0], [93.1, 896776.0], [93.2, 896776.0], [93.3, 2405425.0], [93.4, 2405425.0], [93.5, 2405482.0], [93.6, 2405482.0], [93.7, 2944390.0], [93.8, 2944390.0], [93.9, 2945038.0], [94.0, 2945038.0], [94.1, 2945730.0], [94.2, 2945730.0], [94.3, 2945740.0], [94.4, 2945740.0], [94.5, 2945741.0], [94.6, 2945741.0], [94.7, 2945742.0], [94.8, 2945742.0], [94.9, 2945789.0], [95.0, 2945789.0], [95.1, 2945802.0], [95.2, 2945802.0], [95.3, 2945822.0], [95.4, 2945822.0], [95.5, 2945862.0], [95.6, 2945862.0], [95.7, 2945897.0], [95.8, 2945897.0], [95.9, 2945901.0], [96.0, 2945901.0], [96.1, 2945914.0], [96.2, 2945914.0], [96.3, 2945995.0], [96.4, 2945995.0], [96.5, 2946009.0], [96.6, 2946009.0], [96.7, 2946098.0], [96.8, 2946098.0], [96.9, 2946345.0], [97.0, 2946345.0], [97.1, 2946435.0], [97.2, 2946435.0], [97.3, 2946684.0], [97.4, 2946684.0], [97.5, 2946686.0], [97.6, 2946686.0], [97.7, 2946690.0], [97.8, 2946690.0], [97.9, 2946828.0], [98.0, 2946828.0], [98.1, 2946841.0], [98.2, 2946841.0], [98.3, 2946932.0], [98.4, 2946932.0], [98.5, 2946966.0], [98.6, 2946966.0], [98.7, 2946971.0], [98.8, 2946971.0], [98.9, 2946989.0], [99.0, 2946989.0], [99.1, 2947089.0], [99.2, 2947089.0], [99.3, 2947625.0], [99.4, 2947625.0], [99.5, 2947670.0], [99.6, 2947670.0], [99.7, 2950107.0], [99.8, 2950107.0], [99.9, 2950107.0], [100.0, 2950107.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[0.0, 525108.0], [0.1, 525108.0], [0.2, 525114.0], [0.3, 525114.0], [0.4, 528381.0], [0.5, 528381.0], [0.6, 528381.0], [0.7, 528416.0], [0.8, 528422.0], [0.9, 528422.0], [1.0, 528517.0], [1.1, 528517.0], [1.2, 528533.0], [1.3, 528533.0], [1.4, 528872.0], [1.5, 528872.0], [1.6, 528955.0], [1.7, 528955.0], [1.8, 529053.0], [1.9, 529053.0], [2.0, 529112.0], [2.1, 529112.0], [2.2, 529125.0], [2.3, 529125.0], [2.4, 529158.0], [2.5, 529158.0], [2.6, 529206.0], [2.7, 529206.0], [2.8, 529206.0], [2.9, 529213.0], [3.0, 529213.0], [3.1, 529223.0], [3.2, 529223.0], [3.3, 529315.0], [3.4, 529315.0], [3.5, 529315.0], [3.6, 529315.0], [3.7, 529334.0], [3.8, 529334.0], [3.9, 529392.0], [4.0, 529392.0], [4.1, 529397.0], [4.2, 529397.0], [4.3, 529410.0], [4.4, 529410.0], [4.5, 529428.0], [4.6, 529428.0], [4.7, 529447.0], [4.8, 529447.0], [4.9, 529450.0], [5.0, 529450.0], [5.1, 529451.0], [5.2, 529451.0], [5.3, 529452.0], [5.4, 529452.0], [5.5, 529615.0], [5.6, 529615.0], [5.7, 529660.0], [5.8, 529660.0], [5.9, 529927.0], [6.0, 529927.0], [6.1, 530172.0], [6.2, 530172.0], [6.3, 531706.0], [6.4, 531706.0], [6.5, 1058903.0], [6.6, 1058903.0], [6.7, 1058961.0], [6.8, 1058961.0], [6.9, 2579318.0], [7.0, 2579318.0], [7.1, 2582967.0], [7.2, 2582967.0], [7.3, 2598344.0], [7.4, 2598344.0], [7.5, 2604985.0], [7.6, 2604985.0], [7.7, 3010146.0], [7.8, 3010146.0], [7.9, 3074727.0], [8.0, 3074727.0], [8.1, 3074829.0], [8.2, 3074829.0], [8.3, 3077797.0], [8.4, 3077797.0], [8.5, 3078165.0], [8.6, 3078165.0], [8.7, 3078192.0], [8.8, 3078490.0], [8.9, 3078490.0], [9.0, 3078581.0], [9.1, 3078581.0], [9.2, 3078726.0], [9.3, 3078726.0], [9.4, 3081122.0], [9.5, 3081122.0], [9.6, 3081765.0], [9.7, 3081765.0], [9.8, 3081791.0], [9.9, 3081791.0], [10.0, 3082472.0], [10.1, 3082472.0], [10.2, 3086366.0], [10.3, 3086366.0], [10.4, 3086637.0], [10.5, 3086637.0], [10.6, 3089430.0], [10.7, 3089430.0], [10.8, 3089467.0], [10.9, 3089467.0], [11.0, 3089773.0], [11.1, 3089773.0], [11.2, 3089805.0], [11.3, 3089805.0], [11.4, 3089871.0], [11.5, 3089871.0], [11.6, 3090076.0], [11.7, 3090076.0], [11.8, 3090615.0], [11.9, 3090615.0], [12.0, 3090696.0], [12.1, 3090696.0], [12.2, 3090706.0], [12.3, 3090706.0], [12.4, 3092696.0], [12.5, 3092696.0], [12.6, 3092822.0], [12.7, 3092822.0], [12.8, 3093242.0], [12.9, 3093242.0], [13.0, 3093389.0], [13.1, 3093389.0], [13.2, 3367126.0], [13.3, 3367126.0], [13.4, 3367427.0], [13.5, 3367427.0], [13.6, 3367460.0], [13.7, 3367460.0], [13.8, 3367486.0], [13.9, 3367486.0], [14.0, 3367489.0], [14.1, 3367489.0], [14.2, 3367489.0], [14.3, 3367489.0], [14.4, 3367489.0], [14.5, 3367489.0], [14.6, 3367489.0], [14.7, 3367489.0], [14.8, 3367490.0], [14.9, 3367490.0], [15.0, 3367492.0], [15.1, 3367492.0], [15.2, 3367493.0], [15.3, 3367493.0], [15.4, 3367495.0], [15.5, 3367495.0], [15.6, 3367495.0], [15.7, 3367495.0], [15.8, 3367495.0], [15.9, 3367495.0], [16.0, 3367496.0], [16.1, 3367496.0], [16.2, 3367497.0], [16.3, 3367497.0], [16.4, 3367499.0], [16.5, 3367499.0], [16.6, 3367500.0], [16.7, 3367500.0], [16.8, 3367500.0], [16.9, 3367500.0], [17.0, 3367500.0], [17.1, 3367500.0], [17.2, 3367501.0], [17.3, 3367501.0], [17.4, 3367501.0], [17.5, 3367501.0], [17.6, 3367503.0], [17.7, 3367503.0], [17.8, 3367506.0], [17.9, 3367506.0], [18.0, 3367506.0], [18.1, 3367506.0], [18.2, 3367506.0], [18.3, 3367506.0], [18.4, 3367506.0], [18.5, 3367506.0], [18.6, 3367506.0], [18.7, 3367506.0], [18.8, 3367508.0], [18.9, 3367508.0], [19.0, 3367511.0], [19.1, 3367511.0], [19.2, 3367511.0], [19.3, 3367511.0], [19.4, 3367512.0], [19.5, 3367512.0], [19.6, 3367512.0], [19.7, 3367512.0], [19.8, 3367514.0], [19.9, 3367514.0], [20.0, 3367515.0], [20.1, 3367515.0], [20.2, 3367516.0], [20.3, 3367516.0], [20.4, 3367516.0], [20.5, 3367516.0], [20.6, 3367517.0], [20.7, 3367517.0], [20.8, 3367519.0], [20.9, 3367519.0], [21.0, 3367521.0], [21.1, 3367521.0], [21.2, 3367521.0], [21.3, 3367521.0], [21.4, 3367522.0], [21.5, 3367522.0], [21.6, 3367522.0], [21.7, 3367522.0], [21.8, 3367525.0], [21.9, 3367525.0], [22.0, 3367529.0], [22.1, 3367529.0], [22.2, 3367530.0], [22.3, 3367530.0], [22.4, 3367530.0], [22.5, 3367530.0], [22.6, 3367531.0], [22.7, 3367531.0], [22.8, 3367532.0], [22.9, 3367532.0], [23.0, 3368097.0], [23.1, 3368097.0], [23.2, 3379343.0], [23.3, 3379343.0], [23.4, 3379347.0], [23.5, 3379347.0], [23.6, 3379351.0], [23.7, 3379351.0], [23.8, 3379354.0], [23.9, 3379354.0], [24.0, 3379364.0], [24.1, 3379364.0], [24.2, 3379366.0], [24.3, 3379366.0], [24.4, 3379372.0], [24.5, 3379372.0], [24.6, 3379372.0], [24.7, 3379372.0], [24.8, 3379372.0], [24.9, 3379372.0], [25.0, 3379380.0], [25.1, 3379380.0], [25.2, 3379383.0], [25.3, 3379383.0], [25.4, 3379509.0], [25.5, 3379509.0], [25.6, 3379521.0], [25.7, 3379521.0], [25.8, 3379548.0], [25.9, 3379548.0], [26.0, 3379550.0], [26.1, 3379550.0], [26.2, 3379551.0], [26.3, 3379551.0], [26.4, 3379551.0], [26.5, 3379551.0], [26.6, 3379552.0], [26.7, 3379552.0], [26.8, 3379553.0], [26.9, 3379553.0], [27.0, 3379553.0], [27.1, 3379553.0], [27.2, 3379559.0], [27.3, 3379559.0], [27.4, 3379564.0], [27.5, 3379564.0], [27.6, 3379564.0], [27.7, 3379564.0], [27.8, 3379566.0], [27.9, 3379566.0], [28.0, 3379566.0], [28.1, 3379566.0], [28.2, 3379566.0], [28.3, 3379566.0], [28.4, 3379568.0], [28.5, 3379568.0], [28.6, 3379569.0], [28.7, 3379569.0], [28.8, 3379571.0], [28.9, 3379571.0], [29.0, 3379572.0], [29.1, 3379572.0], [29.2, 3379572.0], [29.3, 3379572.0], [29.4, 3379573.0], [29.5, 3379573.0], [29.6, 3379575.0], [29.7, 3379575.0], [29.8, 3379576.0], [29.9, 3379576.0], [30.0, 3379576.0], [30.1, 3379576.0], [30.2, 3379576.0], [30.3, 3379576.0], [30.4, 3379576.0], [30.5, 3379576.0], [30.6, 3379577.0], [30.7, 3379577.0], [30.8, 3379577.0], [30.9, 3379577.0], [31.0, 3379578.0], [31.1, 3379578.0], [31.2, 3379578.0], [31.3, 3379578.0], [31.4, 3379580.0], [31.5, 3379580.0], [31.6, 3379580.0], [31.7, 3379580.0], [31.8, 3379581.0], [31.9, 3379581.0], [32.0, 3379603.0], [32.1, 3379603.0], [32.2, 3379620.0], [32.3, 3379620.0], [32.4, 3379621.0], [32.5, 3379621.0], [32.6, 3379621.0], [32.7, 3379621.0], [32.8, 3379622.0], [32.9, 3379622.0], [33.0, 3379670.0], [33.1, 3379670.0], [33.2, 3390268.0], [33.3, 3390268.0], [33.4, 3390376.0], [33.5, 3390376.0], [33.6, 3390379.0], [33.7, 3390379.0], [33.8, 3390383.0], [33.9, 3390383.0], [34.0, 3390384.0], [34.1, 3390384.0], [34.2, 3390388.0], [34.3, 3390388.0], [34.4, 3390389.0], [34.5, 3390389.0], [34.6, 3390390.0], [34.7, 3390390.0], [34.8, 3390390.0], [34.9, 3390390.0], [35.0, 3390391.0], [35.1, 3390391.0], [35.2, 3390391.0], [35.3, 3390391.0], [35.4, 3390392.0], [35.5, 3390392.0], [35.6, 3390394.0], [35.7, 3390394.0], [35.8, 3390395.0], [35.9, 3390395.0], [36.0, 3390395.0], [36.1, 3390395.0], [36.2, 3390396.0], [36.3, 3390396.0], [36.4, 3390397.0], [36.5, 3390397.0], [36.6, 3390399.0], [36.7, 3390399.0], [36.8, 3390399.0], [36.9, 3390399.0], [37.0, 3390399.0], [37.1, 3390399.0], [37.2, 3390400.0], [37.3, 3390400.0], [37.4, 3390400.0], [37.5, 3390400.0], [37.6, 3390400.0], [37.7, 3390400.0], [37.8, 3390401.0], [37.9, 3390401.0], [38.0, 3390401.0], [38.1, 3390401.0], [38.2, 3390401.0], [38.3, 3390401.0], [38.4, 3390403.0], [38.5, 3390403.0], [38.6, 3390404.0], [38.7, 3390404.0], [38.8, 3390404.0], [38.9, 3390404.0], [39.0, 3390406.0], [39.1, 3390406.0], [39.2, 3390406.0], [39.3, 3390406.0], [39.4, 3390408.0], [39.5, 3390408.0], [39.6, 3390409.0], [39.7, 3390409.0], [39.8, 3390409.0], [39.9, 3390409.0], [40.0, 3390409.0], [40.1, 3390409.0], [40.2, 3390410.0], [40.3, 3390410.0], [40.4, 3390410.0], [40.5, 3390410.0], [40.6, 3390410.0], [40.7, 3390410.0], [40.8, 3390412.0], [40.9, 3390412.0], [41.0, 3390414.0], [41.1, 3390414.0], [41.2, 3390414.0], [41.3, 3390414.0], [41.4, 3390415.0], [41.5, 3390415.0], [41.6, 3390416.0], [41.7, 3390416.0], [41.8, 3390417.0], [41.9, 3390417.0], [42.0, 3390419.0], [42.1, 3390419.0], [42.2, 3390420.0], [42.3, 3390420.0], [42.4, 3390420.0], [42.5, 3390429.0], [42.6, 3390429.0], [42.7, 3391400.0], [42.8, 3391400.0], [42.9, 3391659.0], [43.0, 3391659.0], [43.1, 3391678.0], [43.2, 3391678.0], [43.3, 3402416.0], [43.4, 3402416.0], [43.5, 3402419.0], [43.6, 3402419.0], [43.7, 3402420.0], [43.8, 3402420.0], [43.9, 3402420.0], [44.0, 3402420.0], [44.1, 3402421.0], [44.2, 3402421.0], [44.3, 3402422.0], [44.4, 3402422.0], [44.5, 3402422.0], [44.6, 3402422.0], [44.7, 3402423.0], [44.8, 3402423.0], [44.9, 3402425.0], [45.0, 3402425.0], [45.1, 3402425.0], [45.2, 3402425.0], [45.3, 3402427.0], [45.4, 3402427.0], [45.5, 3402427.0], [45.6, 3402427.0], [45.7, 3402428.0], [45.8, 3402428.0], [45.9, 3402429.0], [46.0, 3402429.0], [46.1, 3402430.0], [46.2, 3402430.0], [46.3, 3402432.0], [46.4, 3402432.0], [46.5, 3402434.0], [46.6, 3402434.0], [46.7, 3402435.0], [46.8, 3402435.0], [46.9, 3403379.0], [47.0, 3403379.0], [47.1, 3403386.0], [47.2, 3403386.0], [47.3, 3403393.0], [47.4, 3403393.0], [47.5, 3403393.0], [47.6, 3403393.0], [47.7, 3403397.0], [47.8, 3403397.0], [47.9, 3403404.0], [48.0, 3403404.0], [48.1, 3403411.0], [48.2, 3403411.0], [48.3, 3403422.0], [48.4, 3403422.0], [48.5, 3403423.0], [48.6, 3403423.0], [48.7, 3403424.0], [48.8, 3403424.0], [48.9, 3403429.0], [49.0, 3403429.0], [49.1, 3403430.0], [49.2, 3403430.0], [49.3, 3403433.0], [49.4, 3403433.0], [49.5, 3403435.0], [49.6, 3403435.0], [49.7, 3403435.0], [49.8, 3403435.0], [49.9, 3403435.0], [50.0, 3403435.0], [50.1, 3403438.0], [50.2, 3403438.0], [50.3, 3403451.0], [50.4, 3403451.0], [50.5, 3403451.0], [50.6, 3403451.0], [50.7, 3403452.0], [50.8, 3403452.0], [50.9, 3403453.0], [51.0, 3403453.0], [51.1, 3403455.0], [51.2, 3403455.0], [51.3, 3403455.0], [51.4, 3403455.0], [51.5, 3403456.0], [51.6, 3403456.0], [51.7, 3403456.0], [51.8, 3403456.0], [51.9, 3403457.0], [52.0, 3403457.0], [52.1, 3403461.0], [52.2, 3403461.0], [52.3, 3403613.0], [52.4, 3403613.0], [52.5, 3403617.0], [52.6, 3403617.0], [52.7, 3403620.0], [52.8, 3403620.0], [52.9, 3403850.0], [53.0, 3403850.0], [53.1, 3403853.0], [53.2, 3403853.0], [53.3, 3415060.0], [53.4, 3415060.0], [53.5, 3415221.0], [53.6, 3415221.0], [53.7, 3415278.0], [53.8, 3415278.0], [53.9, 3415279.0], [54.0, 3415279.0], [54.1, 3415280.0], [54.2, 3415280.0], [54.3, 3415280.0], [54.4, 3415280.0], [54.5, 3415281.0], [54.6, 3415281.0], [54.7, 3415282.0], [54.8, 3415282.0], [54.9, 3415282.0], [55.0, 3415282.0], [55.1, 3415282.0], [55.2, 3415282.0], [55.3, 3415283.0], [55.4, 3415283.0], [55.5, 3415283.0], [55.6, 3415283.0], [55.7, 3415284.0], [55.8, 3415284.0], [55.9, 3415284.0], [56.0, 3415284.0], [56.1, 3415285.0], [56.2, 3415285.0], [56.3, 3415286.0], [56.4, 3415286.0], [56.5, 3415287.0], [56.6, 3415287.0], [56.7, 3415288.0], [56.8, 3415288.0], [56.9, 3415288.0], [57.0, 3415288.0], [57.1, 3415291.0], [57.2, 3415291.0], [57.3, 3415292.0], [57.4, 3415292.0], [57.5, 3415301.0], [57.6, 3415301.0], [57.7, 3415311.0], [57.8, 3415311.0], [57.9, 3415320.0], [58.0, 3415320.0], [58.1, 3415320.0], [58.2, 3415320.0], [58.3, 3415322.0], [58.4, 3415322.0], [58.5, 3415334.0], [58.6, 3415334.0], [58.7, 3415338.0], [58.8, 3415338.0], [58.9, 3415409.0], [59.0, 3415409.0], [59.1, 3415413.0], [59.2, 3415413.0], [59.3, 3415415.0], [59.4, 3415415.0], [59.5, 3415426.0], [59.6, 3415426.0], [59.7, 3415435.0], [59.8, 3415435.0], [59.9, 3415436.0], [60.0, 3415436.0], [60.1, 3415437.0], [60.2, 3415437.0], [60.3, 3415439.0], [60.4, 3415439.0], [60.5, 3415439.0], [60.6, 3415439.0], [60.7, 3415441.0], [60.8, 3415441.0], [60.9, 3415442.0], [61.0, 3415442.0], [61.1, 3415443.0], [61.2, 3415443.0], [61.3, 3415443.0], [61.4, 3415443.0], [61.5, 3415445.0], [61.6, 3415445.0], [61.7, 3415447.0], [61.8, 3415447.0], [61.9, 3415448.0], [62.0, 3415448.0], [62.1, 3415448.0], [62.2, 3415448.0], [62.3, 3415462.0], [62.4, 3415462.0], [62.5, 3415469.0], [62.6, 3415469.0], [62.7, 3415470.0], [62.8, 3415470.0], [62.9, 3415735.0], [63.0, 3415735.0], [63.1, 3415939.0], [63.2, 3415939.0], [63.3, 3427227.0], [63.4, 3427227.0], [63.5, 3427228.0], [63.6, 3427228.0], [63.7, 3427235.0], [63.8, 3427235.0], [63.9, 3427240.0], [64.0, 3427240.0], [64.1, 3427270.0], [64.2, 3427270.0], [64.3, 3427273.0], [64.4, 3427273.0], [64.5, 3427274.0], [64.6, 3427274.0], [64.7, 3427274.0], [64.8, 3427274.0], [64.9, 3427275.0], [65.0, 3427275.0], [65.1, 3427282.0], [65.2, 3427282.0], [65.3, 3427314.0], [65.4, 3427314.0], [65.5, 3427319.0], [65.6, 3427319.0], [65.7, 3427320.0], [65.8, 3427320.0], [65.9, 3427322.0], [66.0, 3427322.0], [66.1, 3427323.0], [66.2, 3427323.0], [66.3, 3427324.0], [66.4, 3427324.0], [66.5, 3427325.0], [66.6, 3427325.0], [66.7, 3427325.0], [66.8, 3427325.0], [66.9, 3427325.0], [67.0, 3427325.0], [67.1, 3427325.0], [67.2, 3427325.0], [67.3, 3427326.0], [67.4, 3427326.0], [67.5, 3427326.0], [67.6, 3427326.0], [67.7, 3427329.0], [67.8, 3427329.0], [67.9, 3427329.0], [68.0, 3427329.0], [68.1, 3427329.0], [68.2, 3427329.0], [68.3, 3427332.0], [68.4, 3427332.0], [68.5, 3427332.0], [68.6, 3427332.0], [68.7, 3427332.0], [68.8, 3427332.0], [68.9, 3427332.0], [69.0, 3427332.0], [69.1, 3427333.0], [69.2, 3427333.0], [69.3, 3427334.0], [69.4, 3427334.0], [69.5, 3427335.0], [69.6, 3427335.0], [69.7, 3427338.0], [69.8, 3427338.0], [69.9, 3427339.0], [70.0, 3427339.0], [70.1, 3427339.0], [70.2, 3427339.0], [70.3, 3427340.0], [70.4, 3427340.0], [70.5, 3427341.0], [70.6, 3427341.0], [70.7, 3427342.0], [70.8, 3427342.0], [70.9, 3427342.0], [71.0, 3427342.0], [71.1, 3427342.0], [71.2, 3427342.0], [71.3, 3427344.0], [71.4, 3427344.0], [71.5, 3427350.0], [71.6, 3427350.0], [71.7, 3427825.0], [71.8, 3427825.0], [71.9, 3428048.0], [72.0, 3428048.0], [72.1, 3428053.0], [72.2, 3428053.0], [72.3, 3428063.0], [72.4, 3428063.0], [72.5, 3428067.0], [72.6, 3428067.0], [72.7, 3428074.0], [72.8, 3428074.0], [72.9, 3428086.0], [73.0, 3428086.0], [73.1, 3428087.0], [73.2, 3428087.0], [73.3, 3440115.0], [73.4, 3440115.0], [73.5, 3440116.0], [73.6, 3440116.0], [73.7, 3440119.0], [73.8, 3440119.0], [73.9, 3440123.0], [74.0, 3440123.0], [74.1, 3440124.0], [74.2, 3440124.0], [74.3, 3440127.0], [74.4, 3440127.0], [74.5, 3440128.0], [74.6, 3440128.0], [74.7, 3440129.0], [74.8, 3440129.0], [74.9, 3440131.0], [75.0, 3440131.0], [75.1, 3440134.0], [75.2, 3440134.0], [75.3, 3440135.0], [75.4, 3440135.0], [75.5, 3440139.0], [75.6, 3440139.0], [75.7, 3440139.0], [75.8, 3440139.0], [75.9, 3440143.0], [76.0, 3440143.0], [76.1, 3440146.0], [76.2, 3440146.0], [76.3, 3440148.0], [76.4, 3440148.0], [76.5, 3440152.0], [76.6, 3440152.0], [76.7, 3440156.0], [76.8, 3440156.0], [76.9, 3440160.0], [77.0, 3440160.0], [77.1, 3440164.0], [77.2, 3440164.0], [77.3, 3440165.0], [77.4, 3440165.0], [77.5, 3440166.0], [77.6, 3440166.0], [77.7, 3440169.0], [77.8, 3440169.0], [77.9, 3440170.0], [78.0, 3440170.0], [78.1, 3440170.0], [78.2, 3440170.0], [78.3, 3440171.0], [78.4, 3440171.0], [78.5, 3440173.0], [78.6, 3440173.0], [78.7, 3440175.0], [78.8, 3440175.0], [78.9, 3440176.0], [79.0, 3440176.0], [79.1, 3440176.0], [79.2, 3440176.0], [79.3, 3440176.0], [79.4, 3440176.0], [79.5, 3440178.0], [79.6, 3440178.0], [79.7, 3440179.0], [79.8, 3440179.0], [79.9, 3440182.0], [80.0, 3440182.0], [80.1, 3440183.0], [80.2, 3440183.0], [80.3, 3440183.0], [80.4, 3440183.0], [80.5, 3440184.0], [80.6, 3440184.0], [80.7, 3440186.0], [80.8, 3440186.0], [80.9, 3440186.0], [81.0, 3440186.0], [81.1, 3440187.0], [81.2, 3440187.0], [81.3, 3440188.0], [81.4, 3440188.0], [81.5, 3440190.0], [81.6, 3440190.0], [81.7, 3440194.0], [81.8, 3440194.0], [81.9, 3440195.0], [82.0, 3440195.0], [82.1, 3440197.0], [82.2, 3440197.0], [82.3, 3440199.0], [82.4, 3440199.0], [82.5, 3440200.0], [82.6, 3440200.0], [82.7, 3440204.0], [82.8, 3440204.0], [82.9, 3440207.0], [83.0, 3440207.0], [83.1, 3440207.0], [83.2, 3440207.0], [83.3, 3451807.0], [83.4, 3451807.0], [83.5, 3452124.0], [83.6, 3452124.0], [83.7, 3452145.0], [83.8, 3452145.0], [83.9, 3452154.0], [84.0, 3452154.0], [84.1, 3452155.0], [84.2, 3452155.0], [84.3, 3452155.0], [84.4, 3452155.0], [84.5, 3452155.0], [84.6, 3452155.0], [84.7, 3452155.0], [84.8, 3452155.0], [84.9, 3452155.0], [85.0, 3452155.0], [85.1, 3452155.0], [85.2, 3452155.0], [85.3, 3452162.0], [85.4, 3452162.0], [85.5, 3452162.0], [85.6, 3452162.0], [85.7, 3452162.0], [85.8, 3452162.0], [85.9, 3452163.0], [86.0, 3452163.0], [86.1, 3452165.0], [86.2, 3452165.0], [86.3, 3452166.0], [86.4, 3452166.0], [86.5, 3452168.0], [86.6, 3452168.0], [86.7, 3452169.0], [86.8, 3452169.0], [86.9, 3452169.0], [87.0, 3452169.0], [87.1, 3452170.0], [87.2, 3452170.0], [87.3, 3452174.0], [87.4, 3452174.0], [87.5, 3452180.0], [87.6, 3452180.0], [87.7, 3452184.0], [87.8, 3452184.0], [87.9, 3452184.0], [88.0, 3452184.0], [88.1, 3452184.0], [88.2, 3452184.0], [88.3, 3452186.0], [88.4, 3452186.0], [88.5, 3452193.0], [88.6, 3452193.0], [88.7, 3452195.0], [88.8, 3452195.0], [88.9, 3452195.0], [89.0, 3452195.0], [89.1, 3452195.0], [89.2, 3452195.0], [89.3, 3452196.0], [89.4, 3452196.0], [89.5, 3452197.0], [89.6, 3452197.0], [89.7, 3452197.0], [89.8, 3452197.0], [89.9, 3452197.0], [90.0, 3452197.0], [90.1, 3452198.0], [90.2, 3452198.0], [90.3, 3452198.0], [90.4, 3452198.0], [90.5, 3452198.0], [90.6, 3452198.0], [90.7, 3452198.0], [90.8, 3452198.0], [90.9, 3452198.0], [91.0, 3452198.0], [91.1, 3452198.0], [91.2, 3452198.0], [91.3, 3452198.0], [91.4, 3452198.0], [91.5, 3452198.0], [91.6, 3452198.0], [91.7, 3452198.0], [91.8, 3452198.0], [91.9, 3452199.0], [92.0, 3452199.0], [92.1, 3452199.0], [92.2, 3452199.0], [92.3, 3452199.0], [92.4, 3452199.0], [92.5, 3452200.0], [92.6, 3452200.0], [92.7, 3452200.0], [92.8, 3452200.0], [92.9, 3452214.0], [93.0, 3452214.0], [93.1, 3452324.0], [93.2, 3452324.0], [93.3, 3464217.0], [93.4, 3464217.0], [93.5, 3464220.0], [93.6, 3464220.0], [93.7, 3464225.0], [93.8, 3464225.0], [93.9, 3464232.0], [94.0, 3464232.0], [94.1, 3464252.0], [94.2, 3464252.0], [94.3, 3464252.0], [94.4, 3464252.0], [94.5, 3464253.0], [94.6, 3464253.0], [94.7, 3464255.0], [94.8, 3464255.0], [94.9, 3464255.0], [95.0, 3464255.0], [95.1, 3464255.0], [95.2, 3464255.0], [95.3, 3464255.0], [95.4, 3464255.0], [95.5, 3464257.0], [95.6, 3464257.0], [95.7, 3464259.0], [95.8, 3464259.0], [95.9, 3464259.0], [96.0, 3464259.0], [96.1, 3464260.0], [96.2, 3464260.0], [96.3, 3464269.0], [96.4, 3464269.0], [96.5, 3464277.0], [96.6, 3464277.0], [96.7, 3464452.0], [96.8, 3464452.0], [96.9, 3464462.0], [97.0, 3464462.0], [97.1, 3464467.0], [97.2, 3464467.0], [97.3, 3464475.0], [97.4, 3464475.0], [97.5, 3464476.0], [97.6, 3464476.0], [97.7, 3464476.0], [97.8, 3464476.0], [97.9, 3464478.0], [98.0, 3464478.0], [98.1, 3464478.0], [98.2, 3464478.0], [98.3, 3464479.0], [98.4, 3464479.0], [98.5, 3464480.0], [98.6, 3464480.0], [98.7, 3464483.0], [98.8, 3464483.0], [98.9, 3464484.0], [99.0, 3464484.0], [99.1, 3464487.0], [99.2, 3464487.0], [99.3, 3464488.0], [99.4, 3464488.0], [99.5, 3464488.0], [99.6, 3464488.0], [99.7, 3464516.0], [99.8, 3464516.0], [99.9, 3464519.0], [100.0, 3464519.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 94.0, "series": [{"data": [[0.0, 81.0], [600.0, 59.0], [700.0, 26.0], [386500.0, 1.0], [377700.0, 1.0], [383300.0, 2.0], [389700.0, 1.0], [900.0, 49.0], [1000.0, 24.0], [1100.0, 5.0], [2945700.0, 5.0], [385600.0, 1.0], [383200.0, 1.0], [389600.0, 2.0], [2947000.0, 1.0], [871000.0, 1.0], [877700.0, 1.0], [381900.0, 1.0], [382700.0, 2.0], [2950100.0, 2.0], [2946000.0, 2.0], [2945000.0, 1.0], [385800.0, 1.0], [382600.0, 1.0], [386600.0, 2.0], [2946300.0, 1.0], [893000.0, 1.0], [2946800.0, 2.0], [2945800.0, 4.0], [385300.0, 2.0], [2405400.0, 2.0], [2947600.0, 2.0], [2944300.0, 1.0], [2946600.0, 3.0], [896700.0, 1.0], [386000.0, 2.0], [382800.0, 1.0], [100.0, 28.0], [386300.0, 1.0], [200.0, 94.0], [2946900.0, 4.0], [2945900.0, 3.0], [300.0, 26.0], [2946400.0, 1.0], [386200.0, 4.0], [385400.0, 1.0], [400.0, 22.0], [454200.0, 1.0], [500.0, 20.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[528400.0, 2.0], [3415700.0, 1.0], [3074700.0, 1.0], [3081100.0, 1.0], [3379600.0, 6.0], [3089800.0, 2.0], [3451800.0, 1.0], [529300.0, 5.0], [3427200.0, 10.0], [3452300.0, 1.0], [2598300.0, 1.0], [3403400.0, 22.0], [3090600.0, 2.0], [3082400.0, 1.0], [3367100.0, 1.0], [3402400.0, 18.0], [3415200.0, 20.0], [3428000.0, 7.0], [3391400.0, 1.0], [529600.0, 2.0], [3464400.0, 15.0], [3415000.0, 1.0], [3427800.0, 1.0], [528900.0, 1.0], [3452100.0, 45.0], [3086300.0, 1.0], [3390400.0, 27.0], [3078100.0, 2.0], [3093200.0, 1.0], [3081700.0, 2.0], [3390200.0, 1.0], [529100.0, 3.0], [3427300.0, 32.0], [3440100.0, 46.0], [3089400.0, 2.0], [3367400.0, 16.0], [3074800.0, 1.0], [529200.0, 3.0], [3090700.0, 1.0], [3086600.0, 1.0], [3403800.0, 2.0], [3078400.0, 1.0], [528500.0, 2.0], [530100.0, 1.0], [531700.0, 1.0], [3415300.0, 7.0], [3464200.0, 17.0], [529400.0, 6.0], [3464500.0, 2.0], [3078700.0, 1.0], [3089700.0, 1.0], [3403300.0, 5.0], [3010100.0, 1.0], [3093300.0, 1.0], [3452200.0, 3.0], [3379500.0, 33.0], [528800.0, 1.0], [3403600.0, 3.0], [1058900.0, 2.0], [3415900.0, 1.0], [3077700.0, 1.0], [3092800.0, 1.0], [3390300.0, 19.0], [3368000.0, 1.0], [3440200.0, 4.0], [3090000.0, 1.0], [3367500.0, 32.0], [529000.0, 1.0], [2579300.0, 1.0], [2604900.0, 1.0], [3391600.0, 2.0], [3078500.0, 1.0], [525100.0, 2.0], [528300.0, 1.0], [529900.0, 1.0], [2582900.0, 1.0], [3092600.0, 1.0], [3379300.0, 11.0], [3415400.0, 20.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3464500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 62.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 938.0, "series": [{"data": [[3.0, 938.0]], "isOverall": false, "label": "Requests in error", "isController": false}, {"data": [[2.0, 62.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 313.692719486081, "minX": 1.53046956E12, "maxY": 500.0, "series": [{"data": [[1.5304725E12, 313.692719486081], [1.5304701E12, 500.0], [1.53046956E12, 500.0], [1.53047166E12, 500.0], [1.53047214E12, 500.0], [1.5304716E12, 500.0], [1.53047208E12, 500.0]], "isOverall": false, "label": "bzm - Concurrency Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5304725E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 3464517.5, "series": [{"data": [[3.0, 1115.0], [4.0, 1116.0], [6.0, 268.5], [9.0, 263.6666666666667], [11.0, 277.0], [12.0, 263.0], [13.0, 261.0], [16.0, 269.6666666666667], [17.0, 268.0], [19.0, 274.5], [20.0, 258.0], [22.0, 256.5], [23.0, 263.0], [25.0, 257.0], [28.0, 251.33333333333334], [30.0, 268.0], [31.0, 270.0], [33.0, 326.0], [36.0, 323.0], [39.0, 309.0], [38.0, 313.5], [41.0, 306.5], [43.0, 302.0], [45.0, 299.0], [44.0, 300.0], [47.0, 296.0], [46.0, 298.0], [49.0, 293.0], [48.0, 294.0], [51.0, 292.0], [54.0, 282.0], [57.0, 273.0], [56.0, 279.0], [58.0, 272.0], [61.0, 266.0], [62.0, 265.0], [67.0, 191.0], [65.0, 239.0], [64.0, 254.0], [69.0, 15.0], [68.0, 13.0], [85.0, 2946435.0], [91.0, 2946684.0], [90.0, 1394120.5], [89.0, 1663887.0], [88.0, 389693.0], [94.0, 1921873.5], [93.0, 384577.3333333333], [97.0, 874421.0], [103.0, 1667169.0], [102.0, 382705.0], [101.0, 1668328.0], [100.0, 389724.0], [107.0, 256559.0], [106.0, 1238332.3333333333], [104.0, 386418.3333333333], [111.0, 381980.0], [110.0, 128634.0], [109.0, 319882.6666666667], [114.0, 2.0], [113.0, 1.5], [119.0, 1.3333333333333333], [116.0, 1.0], [123.0, 1.5], [121.0, 2.0], [133.0, 1.0], [132.0, 2.0], [131.0, 383.0], [128.0, 1.0], [142.0, 195.625], [140.0, 233.5], [136.0, 112.33333333333333], [151.0, 2.5], [150.0, 1.0], [149.0, 376.0], [147.0, 2.0], [146.0, 1.5], [144.0, 1.5], [159.0, 1.5], [157.0, 1.5], [155.0, 2.0], [154.0, 1.0], [153.0, 2.0], [167.0, 2.3333333333333335], [166.0, 2.0], [164.0, 2.0], [162.0, 2.5], [160.0, 2.0], [175.0, 3.0], [173.0, 3.0], [172.0, 3.0], [171.0, 2.0], [169.0, 3.0], [168.0, 3.0], [183.0, 2.0], [182.0, 2.0], [181.0, 3.0], [180.0, 3.0], [179.0, 2.0], [177.0, 2.0], [176.0, 2.5], [191.0, 2947089.0], [186.0, 2.0], [185.0, 2.0], [198.0, 1666217.0], [197.0, 2676525.0], [195.0, 2946908.5], [194.0, 577666.3333333334], [193.0, 1666165.5], [207.0, 117.66666666666667], [206.0, 341.2], [204.0, 344.0], [214.0, 276.5], [212.0, 1.0], [210.0, 1.0], [208.0, 1.0], [221.0, 207.0], [231.0, 183.0], [230.0, 225.0], [228.0, 229.5], [225.0, 214.0], [224.0, 220.14285714285717], [232.0, 215.0], [246.0, 280.75], [245.0, 276.0], [244.0, 277.0], [241.0, 269.0], [255.0, 516.75], [248.0, 246.0], [271.0, 502.0], [268.0, 500.0], [267.0, 500.0], [266.0, 499.0], [264.0, 506.0], [263.0, 498.0], [261.0, 540.0], [260.0, 530.0], [259.0, 528.0], [257.0, 524.0], [286.0, 457.0], [287.0, 460.8], [284.0, 448.25], [282.0, 442.6666666666667], [279.0, 410.0], [278.0, 409.5], [276.0, 410.0], [275.0, 410.0], [272.0, 462.6666666666667], [300.0, 624.25], [296.0, 634.0], [293.0, 573.25], [289.0, 275.4285714285714], [318.0, 767.0], [314.0, 775.4], [313.0, 777.0], [312.0, 660.1428571428571], [332.0, 678.6666666666666], [331.0, 692.5], [329.0, 694.0], [324.0, 750.0], [322.0, 762.5], [351.0, 547.0], [350.0, 655.75], [346.0, 657.0], [345.0, 657.0], [343.0, 661.25], [339.0, 669.3333333333334], [336.0, 673.25], [367.0, 631.0], [366.0, 632.6666666666666], [363.0, 635.0], [362.0, 641.0], [359.0, 644.0], [358.0, 645.0], [356.0, 647.3333333333334], [353.0, 651.0], [352.0, 651.0], [371.0, 622.75], [397.0, 1080.0], [396.0, 893.0909090909091], [395.0, 1102.0], [415.0, 1002.5], [413.0, 1014.5], [411.0, 1025.0], [409.0, 1034.0], [408.0, 1060.0], [406.0, 1019.3333333333334], [403.0, 1059.5], [401.0, 1066.25], [427.0, 976.6666666666666], [424.0, 977.0], [423.0, 979.5], [421.0, 983.0], [419.0, 986.6666666666666], [416.0, 990.0], [444.0, 946.0], [443.0, 957.6666666666666], [441.0, 953.5], [437.0, 957.0], [436.0, 959.0], [435.0, 961.0], [434.0, 964.75], [432.0, 975.3333333333334], [462.0, 25.0], [461.0, 17.0], [452.0, 990.5], [450.0, 1066.0], [449.0, 986.6666666666666], [448.0, 955.5], [479.0, 2945883.5], [475.0, 13.0], [474.0, 171.0], [473.0, 173.0], [471.0, 173.2857142857143], [470.0, 184.85714285714286], [469.0, 181.0], [467.0, 183.0], [466.0, 190.0], [494.0, 2945741.0], [495.0, 2.0], [493.0, 2945730.0], [490.0, 2945795.5], [489.0, 156.0], [487.0, 2946002.0], [486.0, 2946345.0], [484.0, 2946688.0], [483.0, 2946841.0], [482.0, 2950107.0], [500.0, 2945038.0], [499.0, 172.0], [498.0, 341.0], [497.0, 350.0], [496.0, 13.0], [1.0, 1116.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[254.36800000000025, 227375.40800000017]], "isOverall": false, "label": "completarEncuestaPreInscripcion-Aggregated", "isController": false}, {"data": [[111.0, 3452324.0], [114.0, 3464478.0], [113.0, 3464517.5], [119.0, 3464484.0], [116.0, 3464484.75], [123.0, 3464478.5], [121.0, 3464481.5], [127.0, 3440199.0], [125.0, 3464471.0], [132.0, 3391659.0], [140.0, 3403851.5], [139.0, 3415939.0], [138.0, 3428086.0], [137.0, 3428087.0], [136.0, 3428063.0], [150.0, 3440207.0], [159.0, 3440187.0], [157.0, 3440190.0], [155.0, 3440196.25], [154.0, 3440202.0], [152.0, 3440207.0], [167.0, 3440170.0], [164.0, 3440175.5], [162.0, 3440179.0], [160.0, 3440182.5], [175.0, 3440146.0], [174.0, 3440148.0], [173.0, 3440152.0], [171.0, 3440142.0], [170.0, 3440160.0], [169.0, 3440164.5], [168.0, 3440167.5], [183.0, 3440123.0], [182.0, 3440125.5], [181.0, 3440130.0], [180.0, 3440134.0], [179.0, 3440137.6666666665], [176.0, 3440143.0], [191.0, 3428048.0], [188.0, 3428060.0], [186.0, 3434095.0], [185.0, 3440119.0], [214.0, 3464253.0], [212.0, 3453447.52238806], [210.0, 3440186.5], [208.0, 3440179.3333333335], [231.0, 3403616.6666666665], [232.0, 3464220.6666666665], [253.0, 3427825.0], [272.0, 3415735.0], [396.0, 3368097.0], [463.0, 3415426.0], [460.0, 3415437.8333333335], [452.0, 3407444.5641025635], [477.0, 3427233.5], [475.0, 3427269.0], [474.0, 3421821.5254237284], [473.0, 3415409.0], [469.0, 3415414.0], [495.0, 3373540.0921052634], [492.0, 3367489.0], [490.0, 3383350.3333333335], [480.0, 3374975.875], [500.0, 1753405.3181818184], [499.0, 3391179.948717949]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}, {"data": [[396.35800000000006, 3194600.519999998]], "isOverall": false, "label": "obtenerEncuesta-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.53046956E12, "maxY": 33637.63333333333, "series": [{"data": [[1.5304725E12, 33637.63333333333], [1.5304701E12, 21.3], [1.53046956E12, 21987.733333333334], [1.53047166E12, 732.1], [1.53047214E12, 19769.416666666668], [1.5304716E12, 2196.7], [1.53047208E12, 732.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5304725E12, 0.0], [1.5304701E12, 6.433333333333334], [1.53046956E12, 102.93333333333334], [1.53047166E12, 3.216666666666667], [1.53047214E12, 86.85], [1.5304716E12, 9.65], [1.53047208E12, 3.216666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5304725E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 227375.40800000017, "minX": 1.53046956E12, "maxY": 3413768.45391705, "series": [{"data": [[1.5304725E12, 227375.40800000017]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[1.5304725E12, 3413768.45391705], [1.5304701E12, 1058932.0], [1.53046956E12, 529027.4687499999], [1.53047166E12, 2604985.0], [1.53047214E12, 3085268.4444444445], [1.5304716E12, 2586876.3333333335], [1.53047208E12, 3010146.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5304725E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.53046956E12, "maxY": 3082759.4814814813, "series": [{"data": [[1.5304725E12, 0.0]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[1.5304725E12, 0.0], [1.5304701E12, 1058930.0], [1.53046956E12, 528587.4374999999], [1.53047166E12, 2604975.0], [1.53047214E12, 3082759.4814814813], [1.5304716E12, 2586861.0], [1.53047208E12, 3009927.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5304725E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.53046956E12, "maxY": 216.24999999999997, "series": [{"data": [[1.5304725E12, 12.577999999999998]], "isOverall": false, "label": "completarEncuestaPreInscripcion", "isController": false}, {"data": [[1.5304725E12, 1.5046082949308763], [1.5304701E12, 1.0], [1.53046956E12, 216.24999999999997], [1.53047166E12, 206.0], [1.53047214E12, 113.48148148148152], [1.5304716E12, 214.66666666666666], [1.53047208E12, 2.0]], "isOverall": false, "label": "obtenerEncuesta", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5304725E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 528381.0, "minX": 1.53046956E12, "maxY": 3093389.0, "series": [{"data": [[1.53046956E12, 531706.0], [1.53047166E12, 2604985.0], [1.53047214E12, 3093389.0], [1.5304716E12, 2598344.0], [1.53047208E12, 3010146.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.53046956E12, 528381.0], [1.53047166E12, 2604985.0], [1.53047214E12, 3074727.0], [1.5304716E12, 2579318.0], [1.53047208E12, 3010146.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.53046956E12, 529900.3], [1.53047166E12, 2581142.5], [1.53047214E12, 3090671.7], [1.5304716E12, 1760273.200000003], [1.53047208E12, 2589117.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.53046956E12, 531706.0], [1.53047166E12, 2604985.0], [1.53047214E12, 3093389.0], [1.5304716E12, 2598344.0], [1.53047208E12, 3010146.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.53046956E12, 530862.3], [1.53047166E12, 2600004.25], [1.53047214E12, 3092803.1], [1.5304716E12, 2587580.1], [1.53047208E12, 2686017.1999999983]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.53047214E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 792008.5, "minX": 0.0, "maxY": 2581142.5, "series": [{"data": [[0.0, 2581142.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[0.0, 792008.5], [15.0, 2405453.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2581120.5, "series": [{"data": [[0.0, 2581120.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[0.0, 791985.0], [15.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.53046902E12, "maxY": 7.233333333333333, "series": [{"data": [[1.53046902E12, 1.6666666666666667], [1.5304725E12, 7.233333333333333], [1.53046914E12, 2.5], [1.5304701E12, 0.03333333333333333], [1.53046956E12, 0.5333333333333333], [1.53046908E12, 4.166666666666667], [1.53047214E12, 0.45], [1.53047166E12, 0.016666666666666666], [1.53047208E12, 0.016666666666666666], [1.5304716E12, 0.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5304725E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.53046956E12, "maxY": 14.216666666666667, "series": [{"data": [[1.53046956E12, 0.5], [1.53047166E12, 0.016666666666666666], [1.53047214E12, 0.45], [1.5304716E12, 0.05], [1.53047208E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5304725E12, 1.3333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.ConnectException", "isController": false}, {"data": [[1.5304701E12, 0.03333333333333333], [1.53046956E12, 0.03333333333333333]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.5304725E12, 14.216666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.5304725E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5304725E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.53046956E12, "maxY": 8.333333333333334, "series": [{"data": [[1.53046956E12, 0.5], [1.53047166E12, 0.016666666666666666], [1.53047214E12, 0.45], [1.5304716E12, 0.05], [1.53047208E12, 0.016666666666666666]], "isOverall": false, "label": "obtenerEncuesta-success", "isController": false}, {"data": [[1.5304725E12, 7.233333333333333], [1.5304701E12, 0.03333333333333333], [1.53046956E12, 0.03333333333333333]], "isOverall": false, "label": "obtenerEncuesta-failure", "isController": false}, {"data": [[1.5304725E12, 8.333333333333334]], "isOverall": false, "label": "completarEncuestaPreInscripcion-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5304725E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
